{"version":3,"sources":["assets/Script/ATile.ts","assets/Script/BulletPosion.ts","assets/Script/Bullet.ts","assets/Script/CameraControl.ts","assets/Script/Enemy.ts","assets/Script/GameController.ts","assets/Script/GemAmethyst.ts","assets/Script/GemAquamarine.ts","assets/Script/GemBlackOpal.ts","assets/Script/GemBloodStone.ts","assets/Script/GemDarkEmerald.ts","assets/Script/GemDiamon.ts","assets/Script/GemEmerald.ts","assets/Script/GemGold.ts","assets/Script/GemJade.ts","assets/Script/GemMalachite.ts","assets/Script/GemOpal.ts","assets/Script/GemParaibaTourmaline.ts","assets/Script/GemPinkDiamond.ts","assets/Script/GemRedCrysta.ts","assets/Script/GemRuby.ts","assets/Script/GemSapphire.ts","assets/Script/GemSilver.ts","assets/Script/GemStarRuby.ts","assets/Script/GemTopaz.ts","assets/Script/GemUranium238.ts","assets/Script/GemYellowSapphire.ts","assets/Script/Gem.ts","assets/Script/HitDamage.ts","assets/Script/InitData.ts","assets/Script/ManagerUi.ts","assets/Script/MapController.ts","assets/Script/SlateAirSlate.ts","assets/Script/SlateAncientSlate.ts","assets/Script/SlateDamageSlate.ts","assets/Script/SlateElderSlate.ts","assets/Script/SlateHoldSlate.ts","assets/Script/SlateOpalVeinSlate.ts","assets/Script/SlatePoisonSlate.ts","assets/Script/SlateRangeSlate.ts","assets/Script/SlateSlowSlate.ts","assets/Script/SlateSpellSlate.ts","assets/Script/SlateViperSlate.ts","assets/Script/SplashBullet.ts","assets/Script/Stone.ts","assets/Script/Tile.ts","assets/Script/TouchEvent.ts"],"names":["_a","cc","_decorator","ccclass","property","ATile","pos","this","g","h","f","position","last","prototype","getF","__decorate","exports","default","Enemy_1","require","Bullet_1","BulletPosion","_super","__extends","update","dt","target","name","node","destroy","bulletTarget","onCollisionEnter","other","self","tag","getComponent","index","indexTarget","isDie","activePosion","damagePosion","timeActive","slow","takeDame","damage","indexGemCreateBullet","Bullet","_this","apply","arguments","crit","nameExplosion","stun","direction","chanceCrit","chanceStun","oldPos","getPosition","targetUpdate","pNormalize","pSub","newPos","pAdd","pMult","setPosition","rotation","radiansToDegrees","Math","atan2","x","y","bulletTargetStay","chance","per","max","min","ran","floor","random","checkColli","runAction","sequence","delayTime","callFunc","Component","CameraControl","camera","start","targetPos","parent","convertToWorldSpaceAR","convertToNodeSpaceAR","Camera","Node","HitDamage_1","Gem_1","Enemy","startHealth","startSpeed","speed","pathMove","currentHealth","damePosion","slowPer","dirScale","ani","animState","isSlow","isPosion","gameController","endPos","hitPrefab","progressBar","HpUi","damageToEndPos","checkEndPos","move","updateHpUI","onLoad","Animation","getAnimationState","dataWaveEnemy","countWay","details","HP","scaleX","progress","length","needMoveX","xRound","round","pathXRound","isPlaying","play","reverse","shift","pointEqualToPoint","currentTilePos","mapController","tilePosistion","endTilePos","takeDamage","_i","slates","a","numSelfKill","dieEffect","hit","instantiate","setPositionY","getPositionY","height","damageDisplay","addChild","active","unscheduleAllCallbacks","act1","act2","unschedule","takePosion","schedule","ReleaseSlow","ReleaseStun","time","ProgressBar","MapController_1","Tile_1","Stone_1","InitData_1","GemOpal_1","ManagerUi_1","GameController","countGemCreate","hp","gold","mileWays","tiles","gems","gemsCurrentWay","path","stones","row","col","indexAround","tileSize","enemys","indexKeepGem","indexEnemy","indexGem","gemDisplaying","slateDisplaying","levelPlayer","endMile","isEndWay","isActiveWay","isKeepGem","isPathCanMove","isFlyEnemyNextWay","blockInputEvent","isCompleteBuild","touchStartPos","touchCurrentPos","touchStart","touchMove","touchEnd","gemClick","slateClick","tempCreateGem","stonePick","mileStart","gemPrefab","enemyPrefab","stonePrefab","milePrefab","mileStartPrefab","buildCloudPrefab","combineListPrefab","gemCombinePrefab","slateCombinePrefab","blockInputUi","managerUi","shopUi","playerUi","showInput","displayInfoGem","displayInfoSlate","btnIsKeepBuild","btnCreateGem","btnStartWay","btnRemoveStone","btnRemoveGem","btnCombine","listHighlight","displayRangeUi","notifica","gra","infoCombine","targetCamera","addGemInMap","addStoneInMap","addEnemyInMap","addSlateInMap","dataGem","dataSlate","dataGemCombine","effectSelect","listGemsRemoveCombine","listSlateCanCombine","gemKeepCombine","gemCombine","formulaCombineGem","formulaCombineSlate","manager","director","getCollisionManager","enabled","urlGem","url","raw","urlWaveEnemy","urlFormulaGemCombineList","urlGemCombine","urlFormulaSlateCombineList","urlSlateCombine","loader","load","err","res","ListSlateCombine","updateUi","Combine","loadFormulaCombine","ListGemCombine","CombineSlate","roundUI","getChildByName","Label","enemysWayUI","hpUI","goldUI","levelUI","generaTileAndMiles","addTouchOn","posFirstMile","pixelPosition","i","j","hasGem","hasSlate","hasStone","v2","push","m","posMile","string","toString","arr","around","hasMile","setSizeUI","widgetLeftMap","getWinSize","width","wid","Widget","left","right","getPaths","isFly","partPath","moveToward","console","log","posPixel","tempIndex","posStart","func","event","touches","getTouches","touchLocation","getLocation","location","type","color","Color","isCanCreateGem","showPathsMove","_b","_c","RED","clear","clickGemOrStone","updateListGems","updateListStone","b","square","square_1","c","posStone","_d","_e","square_2","_f","_g","comp","minDamage","maxDamage","showDisplayGem","Type","range","icon","_h","_j","_k","square_3","showDisplaySlate","effectSelectTurnOn","on","EventType","TOUCH_START","TOUCH_END","TOUCH_MOVE","TOUCH_CANCEL","scale","stopAllActions","listEffect","listEffect_1","rep","repeatForever","scaleTo","effectSelectTurnOff","isNeedBuild","lab","p","lineWidth","stroke","tempX","tempY","renderX","renderY","fillRect","indexAround_1","createGem","gem","build","creGem","currentLevel","ranLevelGem","posSquare","indexAround_2","opacity","fadeTo","creBuild","desBuild","setHL","listHL","children","seq","Button","interactable","childs","updateListSlates","slate","stone","startWay","moving_fly","cre","createEnemy","openDoor","closeDoor","checEnd","checkEndWay","macro","REPEAT_FOREVER","seq1","repeat","number","seq2","updateListEnemy","isbuff","arrmorThisTurn","armor","listArrmorGem","listArmorObj","isSetArmorZero","armorDmg","enemy","originalScale","actionPosition","KeepGem","mode","gemKeep","indexKeep","posS","posS_1","i_1","splice","setSiblingIndex","childrenCount","resetWay","iconDisplay","Sprite","nameDisplay","spriteFrame","isCombined","combineBtn","downgradeBtn","keepBtn","upgradeBtn","setContentSize","checkLV","listLevelObj","currentLV","stringLabel","checkGemBasicUpgrade","checkGemInGemsCurrentWay","isNeedCheck","checkCombineGem","Name","checkSlateCombine","arraySlateBtn","arraySlateBtn_1","numOfCreate","slateClone","gemCurrentCheck","indexGemDisplay","isHasSlateInGemDisplay","indexAround_3","listCanCombine","List","toLocaleLowerCase","listGemsToCheck","k","count","tempCount","countTEqual1","indexC","t","typeCheck","isCanCheck","indexC_1","r","indexC_2","createSlate","customEventData","nodeName","indexAround_4","listDataCombine","checkObj","listDataCombine_1","str1","listCanCombine_1","str2","tempA","indexKCanCombine","_l","_m","indexC_3","nameGemKeepCombine","typeGemKeepCombine","in2","in1","isNeed","nameCheckObj","typeCheckObj","nameListGemsToCheck","typeListGemsToCheck","isNeedPush","listCheck","listCheck_1","square_4","gemPos","damageEnemy","downgradeGem","gemComp","removeGem","gemRemove","removedBuffGemsAround","removeStone","stoneRemove","stoneNode","CombineGem","createGemCombine","oldGem","nameNewGem","newGem","checkTouchMap","offSetOutMap","rangeX","rangeY","isKeepBuild","upgradeLevelGem","upgradeLevelHero","Prefab","Graphics","Amethyst","bulletPrefab","turret","img","level","arrmor","isCanAttack","checkEnemyAround","targetEnemy","listEnemey","detectNearestEnemy","isCdShoot","tempTime","cdActiveSkill","timeCd","incrSDP","maxCd","duration","newDis","pDistance","shoot","cdskill","bullet","SpriteFrame","GemAquamarine","nearestEnemy","Aquamarine","GemBlackOpal","indexx","Level","buffDMG","checkGemAround","rangeBuff","listGemAround","buffGemsAround","incrDMG","buffSDP","GemBloodStone","isCdToDeal","targettedToDeal","listEnemeyDps","collider","CircleCollider","checkEnemyAroundDPS","dpsSkill","dealDmgTargetted","playAdditive","critDamage","listTemp","numRemove","temp","dis","dmg","dmgArmor","incr","totalDMG","isCdDps","dps","rangeDPS","radius","act3","damageDps","GemDarkEmerald","GemDiamon","Diamon","GemEmerald","Emerald","posion","GemGold","Jade","Malachite","e","GemOpal","cdTime","Opal","act","BuffByOpal","GemParaibaTourmaline","GemPinkDiamond","GemRedCrysta","SplashBullet_1","GemRuby","SplashBullet","Ruby","updateParameter","splashTile","splashRange","GemSapphire","Sapphire","GemSilver","GemStarRuby","GemTopaz","Topaz","setCurrentTime","GemUranium238","listEnemeyBurn","checkEnemyAroundBurn","burnTargetted","rangeBurn","GemYellowSapphire","Gem","cost","costUpgrade","rangeDps","dpsTile","burnTile","damageMin","damageMax","dmgDPS","dmgPosion","increaseSDP","increaseDMG","rangeIncre","check","typeAttack","HitDamage","label","spawn","moveBy","fadeOut","InitData","currentLvPlayer","maxLevelGem","listIsFly","GameController_1","ManagerUi","gemcontroller","nodeFormulaCombine","isLoadFormulaCombine","data","content","ScrollView","item","instan","stringInstan","ATile_1","MapController","posTouchEnd","paths","open","closed","newATile","mapSize","getContentSize","tileSizeWidth","tileSizeHeight","indexOfStepArray","value","stepArray","equals","insertToOpen","step","stepF","finish","pathFound","currentStep","tmpStep","unshift","borderPositions","borderMovablePoints","borderPosition","moveCost","distancePoint","sub","abs","results","hasTop","hasBottom","hasLeft","hasRight","top","bottom","SlateAirSlate","listEnemyGround","listEnemyAir","checkBothEnemyAround","SlateAncientSlate","isCdDmgSkill","isCdHoldSkill","listSlateAround","checkSlateAround","buffSlateAround","dmgSkill","holdEnemy","rand","Dmg","SlateDamageSlate","SlateElderSlate","FrostNova","ThunderClap","FanOfKnives","ShowWave","GoldShoot","ForkedLightning","Posion","SlateHoldSlate","SlateOpalVeinSlate","listEnemey4Tile","listEnemey5Tile","isCd4Tile","isCd5Tile","listSlateAndGemAround","checkGemAndSlateAround","SDP","SlatePoisonSlate","SlateRangeSlate","SlateSlowSlate","SlateSpellSlate","Lightning","CarrionSwarm","TakeGold","SlateViperSlate","checkEnemyAround4And5Tile","Dealing4And5Tile","range4Tile","range5Tile","activeExp","BoxCollider","explosion","size","Stone","addTouch","Tile","TouchEvent","setActive"],"mappings":"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","sourcesContent":["// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ATile {\n    g: number = 0;\n    h: number = 0;\n    f: number = 0;\n    \n    getF() {\n        this.f = this.g + this.h;\n    }\n    \n    position:  cc.Vec2 = null;\n    last: ATile = null;\n\n    constructor (pos: cc.Vec2) {\n        if (pos) {\n            this.position = arguments[0];\n        }\n    }\n}\n","import Enemy from \"./Enemy\";\nimport Bullet from \"./Bullet\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class BulletPosion extends Bullet {\n\n    \n\n    update(dt){\n        if(!this.target.name){\n            this.node.destroy();\n        }\n\n        if(this.target) this.bulletTarget();\n    }\n\n\n    onCollisionEnter(other, self) {\n        if(other.tag != \"1\") return;\n\n        if(other.node.getComponent(Enemy).index == this.indexTarget){\n            if(!other.node.getComponent(Enemy).isDie){\n                other.node.getComponent(Enemy).activePosion(this.damagePosion,this.timeActive);\n                other.node.getComponent(Enemy).slow(this.slow,this.timeActive);\n                other.node.getComponent(Enemy).takeDame(this.damage,this.indexGemCreateBullet);\n            }\n            this.node.destroy();\n        }\n    }\n}\n","import Enemy from \"./Enemy\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Bullet extends cc.Component {\n    target: cc.Node = null;\n    indexTarget: number = 0;\n    indexGemCreateBullet = -1;\n    damage = 1;\n    crit = 1;\n    slow = 1;\n    timeActive = 1;\n    nameExplosion = \"\";\n    damagePosion = 1;\n    stun = 0;\n    direction: cc.Vec2 = null;\n    chanceCrit = 0;\n    chanceStun = 0;\n    \n    update(dt){\n        if(!this.target.name){\n            this.node.destroy();\n        }\n        \n        if(this.target) this.bulletTarget();\n    }\n\n    bulletTarget(){\n        if(!this.target) return;\n\n        let oldPos = this.node.getPosition();\n\n        // get move direction\n        let targetUpdate = this.target.getPosition();\n\n        let direction = cc.pNormalize(cc.pSub(targetUpdate, oldPos));\n\n        let newPos = cc.pAdd(oldPos, cc.pMult(direction, 5));\n\n        // set new position\n        this.node.setPosition(newPos);\n\n        this.node.rotation = cc.radiansToDegrees(Math.atan2(newPos.x, newPos.y));\n    }\n\n    bulletTargetStay(){\n        // if(!this.target) return;\n        let oldPos = this.node.getPosition();\n        let newPos = cc.pAdd(oldPos, cc.pMult(this.direction, 5.5));\n        // set new position\n        this.node.setPosition(newPos);\n\n    }\n    \n    chance(per){\n        let max =  1 / (per / 100);\n        let min = 1;\n        let ran = Math.floor(Math.random() * (max - min + 1)) + min;\n        \n        if(ran == 1){\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n\n    checkColli(other, self){\n        if(other.tag != \"1\") return;\n\n        if(other.node.getComponent(Enemy).index == this.indexTarget){\n            if(!other.node.getComponent(Enemy).isDie){\n\n                if(this.chance(this.chanceCrit)){\n                    this.damage *= this.crit;\n                }\n                \n                if(this.chance(this.chanceStun)){\n                    other.node.getComponent(Enemy).stun(this.stun);\n                }                \n                \n                if(this.slow > 1 || this.slow == -1){\n                    other.node.getComponent(Enemy).slow(this.slow,this.timeActive);\n                }\n                \n\n                if(this.damagePosion > 1){\n                    other.node.getComponent(Enemy).activePosion(this.damagePosion,this.timeActive);\n                }\n                \n                other.node.getComponent(Enemy).takeDame(this.damage,this.indexGemCreateBullet);\n                // if(this.indexGemCreateBullet == -1){\n                    \n                // }else{\n                //     other.node.getComponent(Enemy).takeDame(this.damage,this.indexGemCreateBullet);\n                // }\n                \n            }\n\n            if(this.nameExplosion == \"\"){\n                this.node.destroy();\n            }else{\n                this.node.runAction(cc.sequence(cc.delayTime(2.0), cc.callFunc(function () {\n                    this.node.destroy();\n                }, this)));\n            }\n            \n        }\n    }\n\n    onCollisionEnter(other, self) {\n        this.checkColli(other, self);\n    }\n}\n\n\n","// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class CameraControl extends cc.Component {\n\n    @property(cc.Camera)\n    camera: cc.Camera = null;\n\n    @property(cc.Node)\n    target: cc.Node = null;\n    // @property\n    // text: string = 'hello';\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    update (dt) {\n        let targetPos;\n\n        targetPos = this.target.parent.convertToWorldSpaceAR(this.target.position);\n        \n        this.node.position = this.node.parent.convertToNodeSpaceAR(targetPos);\n    }\n}\n","import GameController from \"./GameController\";\nimport HitDamage from \"./HitDamage\";\nimport Gem from \"./Gem\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Enemy extends cc.Component {\n    startHealth = 350;\n    startSpeed = 0.85;\n    index = 0;\n    speed = 0;\n    pathMove = [];\n    delayTime = 0;\n    currentHealth = 0;\n    damePosion = 0;\n    slowPer = 0;\n    dirScale = 1;\n    ani : cc.Animation = null;\n    animState: cc.AnimationState = null;\n    isDie: boolean = false;\n    isSlow: boolean = false;\n    isPosion: boolean = false;\n\n    damageToEndPos(){\n        return 1;\n    }\n\n    gameController: GameController = null;\n    endPos: cc.Vec2 = null;\n\n    hitPrefab: cc.Prefab = null;\n\n    @property(cc.ProgressBar)\n    progressBar: cc.ProgressBar = null;\n\n    @property(cc.Node)\n    HpUi: cc.Node = null;\n\n    update (dt) {\n        if(this.isDie) return;\n\n        this.checkEndPos();\n        this.move();\n        this.updateHpUI();\n        this.animState.speed = this.speed / 4;\n    }\n    \n    onLoad(){\n        this.speed = this.startSpeed;\n        this.ani = this.getComponent(cc.Animation);\n        this.animState = this.ani.getAnimationState(\"Walk\");\n        \n        this.currentHealth = this.startHealth = this.gameController.dataWaveEnemy[this.gameController.countWay].details.HP;;\n        this.dirScale = this.node.scaleX;\n    }\n\n    updateHpUI(){\n        this.progressBar.progress = (this.currentHealth / this.startHealth);\n    }\n\n    move(){\n        if(this.pathMove.length > 0){\n            // let dir = 1;\n            let needMoveX = true;\n            let xRound = Math.round(this.node.x);\n            let pathXRound = Math.round(this.pathMove[0].x);\n\n            if(xRound != pathXRound){\n                needMoveX = true;\n            }else{\n                needMoveX = false;\n            }\n\n            if(needMoveX){\n                if(!this.ani.getAnimationState(\"Walk\").isPlaying){\n                    this.animState = this.ani.play('Walk');\n                }\n                if(xRound < pathXRound){\n                    \n                    this.progressBar.reverse = false;\n                    this.node.scaleX  = this.dirScale;\n\n                    this.node.x += this.speed;\n                    if(this.node.x > pathXRound){\n                        this.node.setPosition(this.pathMove[0]);\n                        this.pathMove.shift();\n                        return;\n                    }\n                }else{\n                    this.progressBar.reverse = true;\n                    this.node.scaleX = this.dirScale * -1;\n\n                    this.node.x -= this.speed;\n                    if(this.node.x < pathXRound){\n                        this.node.setPosition(this.pathMove[0]);\n                        this.pathMove.shift();\n                        return;\n                    }\n                }\n            }else{\n                if(this.node.y < this.pathMove[0].y){\n                    if(!this.ani.getAnimationState(\"WalkTop\").isPlaying){\n                        this.animState = this.ani.play('WalkTop');\n                    }\n                    this.progressBar.reverse = false;\n                    this.node.scaleX = this.dirScale;\n                    this.node.y += this.speed;\n                    if(this.node.y > this.pathMove[0].y){\n                        this.node.setPosition(this.pathMove[0]);\n                        this.pathMove.shift();\n                        return;\n                    }\n                }else{\n                    if(!this.ani.getAnimationState(\"WalkDown\").isPlaying){\n                        this.animState = this.ani.play('WalkDown');\n                    }\n                    this.progressBar.reverse = false;\n                    this.node.scaleX = this.dirScale;\n                    this.node.y -= this.speed;\n                    if(this.node.y < this.pathMove[0].y){\n                        this.node.setPosition(this.pathMove[0]);\n                        this.pathMove.shift();\n                        return;\n                    }\n                }\n            }\n\n            if(cc.pointEqualToPoint(this.node.getPosition(),this.pathMove[0])){\n                this.pathMove.shift();\n            }            \n        }\n    }\n\n    checkEndPos(){\n        let currentTilePos = this.gameController.mapController.tilePosistion(this.node.getPosition());\n        let endTilePos = this.gameController.mapController.tilePosistion(this.endPos);\n        if(cc.pointEqualToPoint(currentTilePos,endTilePos)){\n            this.gameController.takeDamage(this.damageToEndPos());\n            this.node.destroy();\n        }\n    }\n\n    takeDame(damage,index){\n        this.currentHealth -= damage;\n        if(this.currentHealth <= 0){\n            if(index != -1){\n                // console.log(this.gameController.slates.length);\n                for(let a of this.gameController.slates){\n                    if(a.getComponent(Gem).index == index){\n                        a.getComponent(Gem).numSelfKill++;\n                    }\n                }                \n            }\n            \n            this.dieEffect();\n        }\n        let hit = cc.instantiate(this.hitPrefab);\n        hit.setPosition(this.node.getPosition());\n        hit.setPositionY(this.node.getPositionY() + this.node.height);\n        hit.getComponent(HitDamage).damageDisplay = damage;\n        this.gameController.mapController.node.addChild(hit);\n    }\n\n    // takeDameIndex(damage,index){\n    //     this.currentHealth -= damage;\n    //     if(this.currentHealth <= 0){\n    //         for(let a of this.gameController.slates){\n    //             if(a.getComponent(Gem).index == index){\n    //                 a.getComponent(Gem).numSelfKill++;\n    //             }\n    //         }\n    //         this.dieEffect();\n    //     }\n    //     let hit = cc.instantiate(this.hitPrefab);\n    //     hit.setPosition(this.node.getPosition());\n    //     hit.setPositionY(this.node.getPositionY() + this.node.height);\n    //     hit.getComponent(HitDamage).damageDisplay = damage;\n    //     this.gameController.mapController.node.addChild(hit);\n    // }\n\n    dieEffect(){\n        this.isDie = true;\n        this.HpUi.active = false;\n        this.unscheduleAllCallbacks();\n\n        let act1 = cc.callFunc(function () {\n            this.animState = this.ani.play('Die');\n        }, this);\n\n        let act2 = cc.callFunc(function () {\n            this.node.destroy();\n        }, this);\n\n        this.node.runAction(cc.sequence(act1,cc.delayTime(1.8),act2));        \n    }\n\n    activePosion(damagePosion,timeActive){\n        if(damagePosion > this.damePosion || !this.isPosion){\n            this.damePosion = damagePosion;\n            this.isPosion = true;\n            this.unschedule(this.takePosion);\n            this.schedule(this.takePosion,1,timeActive - 1,0);\n            let act2 = cc.callFunc(function () {\n                this.isPosion = false;\n            }, this);\n            this.node.runAction(cc.sequence(cc.delayTime(timeActive),act2)); \n        }\n    }\n\n    takePosion(){\n        this.currentHealth -= this.damePosion;\n        \n        if(this.currentHealth <= 0){\n            this.dieEffect();\n        }\n        let hit = cc.instantiate(this.hitPrefab);\n        hit.setPosition(this.node.getPosition());\n        hit.setPositionY(this.node.getPositionY() + this.node.height);\n        hit.getComponent(HitDamage).damageDisplay = this.damePosion;\n        this.gameController.mapController.node.addChild(hit);\n    }\n\n    ReleaseSlow(){\n        this.damePosion = 0;\n        this.slowPer = 0;\n        this.speed = this.startSpeed;\n    }\n\n    ReleaseStun(){\n        this.speed = this.startSpeed;\n\n        if(this.slowPer > 0)\n        this.speed = this.startSpeed - ((this.startSpeed * this.slowPer) / 100);\n    }\n\n    slow(slow,timeActive){\n        if(timeActive < 0){\n            this.speed = this.startSpeed - ((this.startSpeed * slow) / 100);\n        }\n\n        if((slow > this.slowPer || !this.isSlow) && timeActive > 0){\n            this.slowPer = slow;\n            this.speed = this.startSpeed - ((this.startSpeed * slow) / 100);\n            this.isSlow = true;\n            this.unschedule(this.ReleaseSlow);\n            this.schedule(this.ReleaseSlow,timeActive + 1,0,0);\n            let act2 = cc.callFunc(function () {\n                this.isSlow = false\n            }, this);\n            this.node.runAction(cc.sequence(cc.delayTime(timeActive),act2)); \n        }\n    }\n\n    stun(time){\n        this.speed = 0;\n        this.unschedule(this.ReleaseStun);\n        this.schedule(this.ReleaseStun,time,0,0);\n    }\n}\n","import MapController from \"./MapController\";\nimport Tile from \"./Tile\";\nimport Gem from \"./Gem\";\nimport Stone from \"./Stone\";\nimport Enemy from \"./Enemy\";\nimport InitData from \"./InitData\";\nimport GemOpal from \"./GemOpal\";\nimport ManagerUi from \"./ManagerUi\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GameController extends cc.Component {\n    @property(MapController)\n    mapController: MapController;\n\n    countWay = 0;\n    countGemCreate = 0;\n    round = 1;\n    // numOfenemy = 5;\n    hp = 20;\n    gold = 0;\n    mileWays = [];\n    tiles = [];\n    gems = [];\n    slates = [];\n    gemsCurrentWay = [];\n    path = [];\n    stones = [];\n    row = 0;\n    col = 0;\n    indexAround = [];\n    tileSize = 0;\n    enemys = [];\n    endPos: cc.Vec2 = null;\n    indexKeepGem = 0;\n    indexEnemy = 1;\n    indexGem = 0;\n    gemDisplaying = null;\n    slateDisplaying = null;\n    levelPlayer = 0;\n    endMile = null;\n\n    isEndWay: boolean = false;\n    isActiveWay: boolean = false; \n    isKeepGem: boolean = false;\n    isPathCanMove: boolean = true;\n    isFlyEnemyNextWay: boolean = false;\n    blockInputEvent: boolean = true;\n    isCompleteBuild: boolean = true;\n\n    touchStartPos = null;\n    touchCurrentPos = null;\n    \n    touchStart: boolean = false;\n    touchMove: boolean = false;\n    touchEnd: boolean = false;\n\n    gemClick = null;\n    slateClick = null;\n    tempCreateGem = null;\n    stonePick = null;\n    mileStart= null;\n    \n    @property(cc.Prefab)\n    gemPrefab: cc.Prefab[] = [];\n\n    @property(cc.Prefab)\n    enemyPrefab: cc.Prefab[] = [];\n\n    @property(cc.Prefab)\n    stonePrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    milePrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    mileStartPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    hitPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    buildCloudPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    combineListPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    gemCombinePrefab: cc.Prefab[] = [];\n\n    @property(cc.Prefab)\n    slateCombinePrefab: cc.Prefab[] = [];\n\n    @property(cc.Node)\n    blockInputUi: cc.Node = null;\n\n    @property(ManagerUi)\n    managerUi: ManagerUi = null;\n\n    @property(cc.Node)\n    shopUi: cc.Node = null;\n\n    @property(cc.Node)\n    playerUi: cc.Node = null;\n\n    @property(cc.Node)\n    showInput: cc.Node = null;\n\n    @property(cc.Node)\n    displayInfoGem: cc.Node = null;\n\n    @property(cc.Node)\n    displayInfoSlate: cc.Node = null;\n\n    @property(cc.Node)\n    btnIsKeepBuild: cc.Node = null;\n\n    @property(cc.Node)\n    btnCreateGem: cc.Node = null;\n\n    @property(cc.Node)\n    btnStartWay: cc.Node = null;\n\n    @property(cc.Node)\n    btnRemoveStone: cc.Node = null;\n\n    @property(cc.Node)\n    btnRemoveGem: cc.Node = null;\n\n    @property(cc.Node)\n    btnCombine: cc.Node = null;\n\n    @property(cc.Node)\n    listHighlight: cc.Node = null;\n\n    @property(cc.Node)\n    displayRangeUi: cc.Node = null;\n\n    @property(cc.Label)\n    notifica: cc.Label = null;\n\n    @property(cc.Graphics)\n    gra: cc.Graphics = null;\n\n    @property(cc.Node)\n    infoCombine: cc.Node = null;\n\n    @property(cc.Node)\n    targetCamera: cc.Node = null;\n\n    addGemInMap: cc.Node = null;\n    addStoneInMap: cc.Node = null;\n    addEnemyInMap: cc.Node = null;\n    addSlateInMap: cc.Node = null;\n\n    roundUI;\n    enemysWayUI;\n    hpUI;\n    goldUI;\n    levelUI;\n    dataGem = [];\n    dataSlate = [];\n    dataGemCombine = [];\n    dataWaveEnemy = [];\n    effectSelect = [];\n\n    // listCanCombine = [];\n    listGemsRemoveCombine = [];\n    listSlateCanCombine = [];\n    gemKeepCombine = null;\n    gemCombine = null;\n\n    formulaCombineGem = [];\n    formulaCombineSlate = [];\n    \n\n    // LIFE-CYCLE CALLBACKS:\n    \n    onLoad () {\n        let manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n\n        let urlGem = cc.url.raw('resources/GemBasic.json');\n        let urlWaveEnemy = cc.url.raw('resources/enemy_wave.json');\n        let urlFormulaGemCombineList = cc.url.raw('resources/ListCombineGem.json');\n        let urlGemCombine = cc.url.raw('resources/GemCombine.json');\n        let urlFormulaSlateCombineList = cc.url.raw('resources/ListSlate.json');\n        let urlSlateCombine = cc.url.raw('resources/SlateCombine.json');\n\n        let self = this;\n        cc.loader.load( urlGem, function( err, res){\n            self.dataGem = res;\n        });\n\n        cc.loader.load( urlSlateCombine, function( err, res){\n            self.dataSlate = res.ListSlateCombine;\n            // console.log(self.dataSlate);\n        });\n\n        cc.loader.load( urlWaveEnemy, function( err, res){\n            self.dataWaveEnemy = res;\n            self.updateUi();  \n        });\n\n        cc.loader.load( urlFormulaGemCombineList, function( err, res){\n            self.formulaCombineGem = res.Combine;\n            self.managerUi.loadFormulaCombine();\n        });\n\n        cc.loader.load( urlGemCombine, function( err, res){\n            self.dataGemCombine = res.ListGemCombine;\n        });\n\n        cc.loader.load(urlFormulaSlateCombineList, function( err, res){\n            self.formulaCombineSlate = res.CombineSlate;\n        });\n        \n        this.roundUI = this.playerUi.getChildByName(\"Round\").getComponent(cc.Label);\n        this.enemysWayUI = this.playerUi.getChildByName(\"EnemysWay\").getComponent(cc.Label);\n        this.hpUI = this.playerUi.getChildByName(\"HP\").getComponent(cc.Label);\n        this.goldUI = this.playerUi.getChildByName(\"Gold\").getComponent(cc.Label);\n        this.levelUI = this.playerUi.getChildByName(\"LvPlayer\").getComponent(cc.Label);\n\n        this.tileSize = 32;\n        this.mileWays = InitData.mileWays;\n        this.mapController.gameController = this;\n        this.isActiveWay = false;\n        this.gold = 2000;\n        this.row = 44;\n        this.col = 60;\n        this.indexEnemy = 1;\n        this.levelPlayer = 1;\n\n        this.addGemInMap = this.mapController.node.getChildByName(\"AddGem\");\n        this.addStoneInMap = this.mapController.node.getChildByName(\"AddStone\");\n        this.addEnemyInMap = this.mapController.node.getChildByName(\"AddEnemy\");\n        this.addSlateInMap = this.mapController.node.getChildByName(\"AddSlate\");\n\n        this.generaTileAndMiles();\n        this.addTouchOn();\n              \n        let posFirstMile = this.mapController.pixelPosition(this.mileWays[0]);\n        posFirstMile.x += this.tileSize / 2;\n        posFirstMile.y += this.tileSize / 2;\n        this.gra.node.setPosition(posFirstMile.x,posFirstMile.y);\n\n        this.endMile = this.mapController.pixelPosition(this.mileWays[this.mileWays.length - 1]);\n    }\n\n    generaTileAndMiles(){\n        // create Tiles\n        for(let i = 0; i < this.col; i++) {\n            for(let j = 0; j < this.row; j++) {\n                let a = new Tile();\n                a.hasGem = a.hasSlate = a.hasStone = false;\n                a.pos = cc.v2(j,i);\n               this.tiles.push(a);\n            }\n        }\n        \n        //create Miles\n        for(let i = 0; i < this.mileWays.length ;i++){\n            let m;\n            let posMile = this.mapController.pixelPosition(this.mileWays[i]);\n            if(i == 0){\n                m = cc.instantiate(this.mileStartPrefab);\n                this.mileStart = m;\n            }else{\n                m = cc.instantiate(this.milePrefab);\n                posMile.x += this.tileSize / 2;\n                posMile.y += this.tileSize / 2;\n            }\n\n            m.setPosition(posMile);\n\n            m.getChildByName(\"index\").getComponent(cc.Label).string = (i + 1).toString();\n            this.addGemInMap.addChild(m);\n\n            let x = this.mileWays[i].x;\n            let y = this.mileWays[i].y;\n            let arr = [cc.v2(x,y),cc.v2(x+2,y),cc.v2(x,y-2),cc.v2(x+2,y-2)];\n            for(let j = 0; j < arr.length ;j++){\n\n                if(arr[j].y < 0||arr[j].x < 0||arr[j].x + 1 >= this.row || arr[j].y + 1 >= this.col) continue;\n\n                let around = [( arr[j].y * this.row + arr[j].x),\n                ( arr[j].y * this.row + arr[j].x - 1),\n                ( (arr[j].y +1) * this.row + arr[j].x),\n                ( (arr[j].y +1) * this.row + arr[j].x - 1)];\n    \n                for(let a = 0;a < around.length; a++){\n                    \n                    this.tiles[around[a]].hasMile = true;\n                }\n            }\n        }        \n    }\n\n    setSizeUI(){\n        let widgetLeftMap = (cc.director.getWinSize().width - (16 * this.row)) / 2;\n        let wid = this.mapController.getComponent(cc.Widget);\n        wid.left = wid.right = widgetLeftMap;\n    }\n\n    getPaths(isFly){\n        this.path = [];\n        for(let i = 0; i < this.mileWays.length - 1; i++){\n            let partPath = this.mapController.moveToward(this.mileWays[i],this.mileWays[i+1],isFly);\n            if(partPath.length < 1){\n                this.isPathCanMove = false;\n                console.log(\"Can't Move\");\n                break;\n            }else{\n                this.isPathCanMove = true;\n            }\n            this.path.push(partPath);\n        }\n    }\n\n    addTouchOn(){\n        let self = this;\n        let pos;\n        let posPixel;\n        let index;\n        let tempIndex;\n        let posStart;\n\n        let func =  function (event) {\n            \n            let touches = event.getTouches();\n            let touchLocation = touches[0].getLocation();\n            // let touchLocation =  cc.v2(event.touch._point.x,event.touch._point.y);\n            let location = self.mapController.node.convertToNodeSpaceAR(touchLocation);\n            location = cc.pAdd(location,self.targetCamera.getPosition());\n            // console.log(location);\n\n            if(self.blockInputEvent){\n                if(event.type == \"touchstart\"){\n                    self.touchStart = true;\n                    self.touchEnd = false;\n                    self.touchMove = false;\n                    self.touchStartPos = location;\n                }\n\n                if(event.type == \"touchmove\"){\n                    self.touchMove = true;\n                    self.touchCurrentPos = location;\n                }\n\n                if(event.type == \"touchend\"){\n                    self.touchStart = false;\n                    self.touchEnd = true;\n                    self.touchMove = false;\n                }\n\n                if(event.type == \"touchcancel\"){\n                    console.log(\"touchcancel\");\n                }\n            }else{\n                // console.log(\"event.type \" + event.type);\n                if(self.btnIsKeepBuild.active) return;\n\n                if(self.countGemCreate < 5){\n                    location.y += (self.tileSize * 4);\n                }\n    \n                self.endPos = location;\n                pos =  self.mapController.tilePosistion(location);\n                posPixel = self.mapController.pixelPosition(pos);\n                index = pos.y * self.row + pos.x;\n                \n                self.indexAround = [( pos.y * self.row + pos.x),\n                    (pos.y * self.row + pos.x + 1), \n                    ((pos.y + 1) * self.row + pos.x),\n                    ((pos.y + 1) * self.row + pos.x + 1)];\n    \n                if(!self.tiles[index]) return;\n    \n                if(event.type == 'touchmove' && tempIndex == index){\n                    return;\n                }\n    \n                if(self.countGemCreate < 5  && !self.tiles[index].hasGem && self.isCompleteBuild){\n                    if(self.gemDisplaying || self.stonePick) return;\n\n                    self.showInput.active = true;\n                    self.showInput.color = new cc.Color(240, 237, 165);\n\n                    self.showInput.setPosition(cc.v2(posPixel.x + self.tileSize / 2, posPixel.y - self.tileSize / 2));\n                    self.showInput.getChildByName(\"GemCount\").getComponent(cc.Label).string = \"(\" + (5 - self.countGemCreate).toString() + \")\"\n\n                if(self.isCanCreateGem(self.indexAround)){\n                    if(!self.isCompleteBuild) return;\n                \n                    if(tempIndex != index){\n                        tempIndex = index;\n    \n                        for(let a of self.indexAround){\n                            self.tiles[a].hasGem = true;\n                        }\n            \n                        self.getPaths(false);\n\n                        self.showPathsMove();\n            \n                        for(let a of self.indexAround){\n                            self.tiles[a].hasGem = false;\n                        }\n                    }\n                    \n                    if(self.isPathCanMove){\n                        if((event.type == 'touchend' || event.type == 'touchcancel') && self.isCompleteBuild){\n                            self.btnIsKeepBuild.setPosition(posPixel.x + self.tileSize/2,posPixel.y - self.tileSize/2);\n                            self.btnIsKeepBuild.active = true;\n                        }\n                    }else{\n                        if(event.type == 'touchend' || event.type == 'touchcancel') self.showInput.active = false;\n                        \n                        if(event.type == 'touchmove') self.showInput.color = cc.Color.RED;\n\n                        self.gra.clear();\n                    }                \n                }else{\n\n                    if(event.type == 'touchend' || event.type == 'touchcancel') self.showInput.active = false;\n                        \n                    if(event.type == 'touchmove') self.showInput.color = cc.Color.RED;\n\n                    self.gra.clear();\n                    }   \n                }\n            } \n        };\n\n\n    let clickGemOrStone =  function (event) {\n        if(self.btnIsKeepBuild.active) return;\n        if(self.showInput.active) return;\n\n        let touches = event.getTouches();\n        let touchLocation = touches[0].getLocation();\n        // let touchLocation =  cc.v2(event.touch._point.x,event.touch._point.y);\n        let location = self.mapController.node.convertToNodeSpaceAR(touchLocation);\n        location = cc.pAdd(location,self.targetCamera.getPosition());\n\n        self.endPos = location;\n        pos =  self.mapController.tilePosistion(location);\n        posPixel = self.mapController.pixelPosition(pos);\n        index = pos.y * self.row + pos.x;\n\n        self.gemDisplaying = null;\n        self.slateClick = null;\n        self.stonePick = null;\n\n        self.updateListGems();\n        self.updateListStone();\n        self.listGemsRemoveCombine = [];\n\n        if(self.tiles[index].hasStone){\n            for(let a of self.stones){\n                let b = a.getComponent(Stone).pos;\n                let square = [cc.v2(b.x,b.y), cc.v2(b.x+1,b.y), cc.v2(b.x,b.y+1)\n                    ,cc.v2(b.x+1,b.y+1)];\n                    \n                for(let c of square){\n                    if(cc.pointEqualToPoint(c,pos) && !self.isKeepGem){\n                        self.stonePick = a;\n                        let posStone = self.mapController.pixelPosition(a.getComponent(Stone).pos);\n                        self.btnRemoveStone.setPosition(posStone.x + self.tileSize/2,posStone.y + self.tileSize * 2);\n                        self.btnRemoveStone.active = true;\n                        break;\n                    }\n                }\n            }\n        }else{\n            self.btnRemoveStone.active = false;\n        }\n\n        //check Click Gem\n        if(self.tiles[index].hasGem){\n            for(let a of self.gems){\n                let b = a.getComponent(Gem).pos;\n                let square = [cc.v2(b.x,b.y), cc.v2(b.x+1,b.y), cc.v2(b.x,b.y+1)\n                    ,cc.v2(b.x+1,b.y+1)];\n                    \n                for(let c of square){\n                    if(cc.pointEqualToPoint(c,pos)){\n                        self.gemDisplaying = a;\n                        break;\n                    }\n                }\n            }\n            if(!self.isKeepGem){\n                for(let a of self.gemsCurrentWay){\n                    if(a.name == \"\") continue;\n\n                    let b = a.getComponent(Gem).pos;\n                    let c = self.gemDisplaying.getComponent(Gem).pos;\n                    if(cc.pointEqualToPoint(b,c)){\n                        self.indexKeepGem = index;\n                        break;\n                    }\n                }\n            }\n\n            if(self.gemDisplaying){\n                let comp = self.gemDisplaying.getComponent(Gem);\n                let damage = [comp.minDamage(),comp.maxDamage()];\n                self.showDisplayGem(comp.pos,comp.Type(),damage,comp.range(),self.gemDisplaying,comp.icon);         \n            }\n        }else{\n            self.gemDisplaying = null;\n            self.displayRangeUi.active = self.displayInfoGem.active = false;\n        }\n\n        //check Click Slate\n        if(self.tiles[index].hasSlate){\n            for(let a of self.slates){\n                let b = a.getComponent(Gem).pos;\n                let square = [cc.v2(b.x,b.y), cc.v2(b.x+1,b.y), cc.v2(b.x,b.y+1)\n                    ,cc.v2(b.x+1,b.y+1)];\n                    \n                for(let c of square){\n                    if(cc.pointEqualToPoint(c,pos)){\n                        self.slateDisplaying = a;\n                        break;\n                    }\n                }\n            }\n\n            if(self.slateDisplaying){\n                let comp = self.slateDisplaying.getComponent(Gem);\n                let damage = [comp.minDamage(),comp.maxDamage()];\n                self.showDisplaySlate(comp.pos,self.slateDisplaying.name,damage,comp.range(),self.slateDisplaying,comp.icon);         \n            }\n        }else{\n            self.slateDisplaying = null;\n            self.displayInfoSlate.active = false;                        \n        }\n\n        // if(!self.slateClick && !self.gemClick){\n        //     self.gemDisplaying = null;\n        //     self.displayRangeUi.active = self.displayInfoGem.active = false;\n        // }\n\n\n        self.effectSelectTurnOn();\n    }\n    self.mapController.node.on(cc.Node.EventType.TOUCH_START,clickGemOrStone, self.mapController.node);\n\n    self.mapController.node.on(cc.Node.EventType.TOUCH_END, func, self.mapController.node);            \n\n    self.mapController.node.on(cc.Node.EventType.TOUCH_START,func, self.mapController.node);\n\n    self.mapController.node.on(cc.Node.EventType.TOUCH_MOVE, func, self.mapController.node);\n\n    self.mapController.node.on(cc.Node.EventType.TOUCH_CANCEL, func,self.mapController.node);\n\n    }\n\n    effectSelectTurnOn(){\n        if(this.effectSelect.length > 0){\n            for(let a of this.effectSelect){\n                if(a.name !== \"\"){\n                    a.scale = 1;\n                    a.stopAllActions();\n                }\n            }\n            this.effectSelect = [];\n        }\n\n        if(this.listGemsRemoveCombine.length > 0){\n            let scale;\n            let listEffect = [];\n            for(let a of this.listGemsRemoveCombine){\n                listEffect.push(a);\n            }\n\n            listEffect.push(this.gemDisplaying);\n\n            for(let a of listEffect){\n                scale = a.scale;\n                let rep = cc.repeatForever(cc.sequence(cc.scaleTo(0.4,scale + 0.15),cc.scaleTo(0.4,scale - 0.15)));\n                a.runAction(rep);\n                this.effectSelect.push(a);\n            }\n        }\n        \n    }\n\n    effectSelectTurnOff(){\n        if(this.effectSelect.length > 0){\n            for(let a of this.effectSelect){\n                if(a.name !== \"\"){\n                    a.scale = 1;\n                    a.stopAllActions();\n                }\n            }\n\n            this.effectSelect = [];\n        }\n    }\n\n    isNeedBuild(){\n        this.blockInputEvent = !this.blockInputEvent;\n        let lab = this.btnCreateGem.getChildByName(\"Label\").getComponent(cc.Label);\n        if(!this.blockInputEvent){\n            lab.string = \"Build\";\n        }else{\n            lab.string = \"Not Build\";\n            this.showInput.active = false;\n            // this.showInput.color = cc.Color.RED;\n        }\n    }\n\n    showPathsMove(){\n        let p = this.path;\n        this.gra.clear();\n        if(p.length <= 0) return;\n\n        this.gra.lineWidth = 0.1;\n        // this.gra.strokeColor = cc.Color.RED;\n        this.gra.stroke();\n        let tempX = p[0][0].x;\n        let tempY = p[0][0].y;\n        let renderX = 0;\n        let renderY = 0;\n\n        this.gra.fillRect(renderX, renderY, this.tileSize, this.tileSize);\n        \n        for(let i = 0;i < p.length;i++){\n            for(let j = 0; j < p[i].length; j++){\n                let x = p[i][j].x;\n                if(x != tempX){\n                    if(x > tempX){\n                        renderX += this.tileSize;\n                    }else{\n                        renderX -= this.tileSize;\n                    }\n                    tempX = p[i][j].x;\n                    this.gra.fillRect(renderX, renderY, this.tileSize , this.tileSize);\n                    continue;\n                }\n\n                let y = p[i][j].y;\n                if(y != tempY){\n                    if(y > tempY){\n                        renderY -= this.tileSize;\n                    }else{\n                        renderY += this.tileSize;\n                    }\n                    tempY = y;\n                    this.gra.fillRect(renderX, renderY, this.tileSize, this.tileSize);\n                    continue;\n                }\n            }  \n        }\n    }\n    \n\n    isCanCreateGem(indexAround){\n        let pos = this.mapController.tilePosistion(this.endPos);\n        if(pos.y < 0||pos.x < 0||pos.x + 1 >= this.row || pos.y + 1 >= this.col){\n            return false;\n        }\n\n        for(let index of indexAround){\n            if(this.tiles[index] && (this.tiles[index].hasGem || this.tiles[index].hasStone || this.tiles[index].hasMile)){\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n\n    createGem(indexAround){\n        if(!this.isCompleteBuild) return;\n        \n        this.showInput.active = false;\n        \n        this.isCompleteBuild = false;        \n\n        let pos = this.mapController.tilePosistion(this.endPos);\n        let posPixel = this.mapController.pixelPosition(pos);\n\n        let max = this.gemPrefab.length - 1;\n        let min = 0;\n        let ran = Math.floor(Math.random() * (max - min + 1)) + min;\n        let gem;\n        let build;\n\n        let creGem = cc.callFunc(function () {\n            this.indexGem++;\n\n            gem = cc.instantiate(this.gemPrefab[ran]);\n            gem.getComponent(Gem).pos = pos;\n            gem.getComponent(Gem).gameController = this;\n            gem.getComponent(Gem).currentLevel = InitData.ranLevelGem(this.levelPlayer);\n            gem.getComponent(Gem).index = this.indexGem;\n    \n            gem.getComponent(Gem).posSquare = [( pos.y * this.row + pos.x),\n                (pos.y * this.row + pos.x + 1), \n                ((pos.y + 1) * this.row + pos.x),\n                ((pos.y + 1) * this.row + pos.x + 1)];\n            \n            gem.setPosition(cc.v2(posPixel.x + this.tileSize / 2, posPixel.y - this.tileSize / 2));\n            this.addGemInMap.addChild(gem);\n            this.gemsCurrentWay.push(gem);\n            this.gems.push(gem);\n            \n\n            for(let index of indexAround){\n                this.tiles[index].hasGem = true;\n                this.tiles[index].hasStone = false;\n            }\n\n            gem.opacity = 0;\n            gem.runAction(cc.fadeTo(0.5,255));\n                   \n        }, this);\n\n        let creBuild = cc.callFunc(function () {\n            build = cc.instantiate(this.buildCloudPrefab);\n            build.setPosition(cc.v2(posPixel.x + this.tileSize / 2, posPixel.y - this.tileSize / 2));\n            this.addGemInMap.addChild(build);\n        }, this);\n\n        let desBuild = cc.callFunc(function () {\n            build.destroy();\n        }, this);\n\n        let setHL = cc.callFunc(function () {\n            let listHL = this.listHighlight.children;\n            for(let i = 0; i < this.gemsCurrentWay.length;i++){\n                listHL[i].active = true;\n                listHL[i].position = this.gemsCurrentWay[i].getPosition();\n                listHL[i].setPositionY(listHL[i].getPositionY());\n            }\n\n            this.countGemCreate++;\n            this.isCompleteBuild = true;\n            \n        }, this);\n\n        let seq = cc.sequence(creBuild,cc.delayTime(1),creGem,desBuild,cc.delayTime(0.5),setHL);\n        this.node.runAction(seq);\n\n        if(this.countGemCreate >= 4){\n            this.isNeedBuild();\n            this.btnCreateGem.getComponent(cc.Button).interactable = false;\n        }\n    }\n\n    updateListGems(){\n        let childs = this.addGemInMap.children;\n        this.gems = [];\n        let length = childs.length;\n        for(let i = 0; i < length;i++){\n            let comp = childs[i].getComponent(Gem);\n            if(comp){\n                let gem = childs[i];\n                this.gems.push(gem);\n            }\n        } \n    }\n\n    updateListSlates(){\n        let childs = this.addSlateInMap.children;\n        this.slates = [];\n        let length = childs.length;\n        for(let i = 0; i < length;i++){\n            let comp = childs[i].getComponent(Gem);\n            if(comp){\n                let slate = childs[i];\n                this.slates.push(slate);\n            }\n        } \n    }\n\n    updateListStone(){\n        let childs = this.addStoneInMap.children;\n        this.stones = [];\n        let length = childs.length;\n        for(let i = 0; i < length;i++){\n            let comp = childs[i].getComponent(Stone);\n            if(comp){\n                let stone = childs[i];\n                this.stones.push(stone);\n            }\n        } \n    }\n\n    startWay(){\n        this.isFlyEnemyNextWay = this.dataWaveEnemy[this.countWay].details.moving_fly;\n\n        this.getPaths(this.isFlyEnemyNextWay);\n        if(this.isPathCanMove){\n            let delayTime = 1.2;\n            this.indexEnemy = 1;\n\n            let cre = cc.callFunc(function () {\n                this.createEnemy();\n            }, this);\n\n            let openDoor = cc.callFunc(function () {\n                this.mileStart.getComponent(cc.Animation).play('OpenDoor');\n            }, this);\n\n            let closeDoor = cc.callFunc(function () {\n                this.mileStart.getComponent(cc.Animation).play('CloseDoor');\n            }, this);\n\n            let checEnd = cc.callFunc(function () {\n                this.schedule(this.checkEndWay,0,cc.macro.REPEAT_FOREVER,0);\n            }, this);\n\n            let seq1 = cc.sequence(cre,cc.delayTime(delayTime));\n            let rep = cc.repeat(seq1,this.dataWaveEnemy[this.countWay].details.number);\n            let seq2 = cc.sequence(openDoor,cc.delayTime(1),rep,closeDoor,checEnd)\n\n            this.node.runAction(seq2);\n\n            this.isActiveWay = true;\n\n            this.schedule(this.updateListEnemy,0,cc.macro.REPEAT_FOREVER,0);\n            \n            this.updateUi();\n        }\n\n        this.updateListGems();\n        this.updateListSlates();\n\n        for(let a of this.gems){\n            a.getComponent(Gem).isbuff = false;\n        }\n\n        for(let a of this.slates){\n            a.getComponent(Gem).isbuff = false;\n        }\n\n        //set Arrmor Gem\n        let arrmorThisTurn = this.dataWaveEnemy[this.countWay].details.armor;\n\n        for(let gem of this.gems){\n            let listArrmorGem = gem.getComponent(Gem).listArmorObj;\n            let isSetArmorZero = true;\n            for(let i = 0;i< listArrmorGem[0].length;i++){\n                if(listArrmorGem[0][i] === arrmorThisTurn){\n                    gem.getComponent(Gem).armorDmg = listArrmorGem[1][i];\n                    isSetArmorZero = false;\n                    continue;\n                }\n            }\n            if(isSetArmorZero) gem.getComponent(Gem).armorDmg  = 0;   \n        }\n    }\n\n    \n    createEnemy(){\n        let enemy = cc.instantiate(this.enemyPrefab[this.countWay]);\n\n        let a = this.mapController.pixelPosition(this.mileWays[0]);\n        \n        // enemy.setPosition(a.x,(a.y - this.mileStart.height / 2));\n        enemy.setPosition(a);\n\n        // let endPos = this.mapController.pixelPosition(this.mileWays[this.mileWays.length - 1]);\n        enemy.getComponent(Enemy).endPos = this.endMile;\n\n        let pathMove = [];\n        let originalScale = enemy.scale;\n\n        for (let i = 0; i < this.path.length; ++i) {\n            for (let j = 0; j < this.path[i].length; ++j) {\n                let actionPosition = this.mapController.pixelPosition(this.path[i][j]);\n                // actionPosition.x += this.tileSize / 2;\n                // actionPosition.y += this.tileSize / 2;\n                pathMove.push(actionPosition);\n            }\n        }\n\n        enemy.getComponent(Enemy).pathMove = pathMove;\n        enemy.getComponent(Enemy).gameController = this;\n        enemy.getComponent(Enemy).hitPrefab = this.hitPrefab;\n        enemy.getComponent(Enemy).index = this.indexEnemy;\n        // enemy.getComponent(Enemy).startHealth = enemy.getComponent(Enemy).currentHealth = this.dataWaveEnemy[this.countWay].details.HP;\n        this.addEnemyInMap.addChild(enemy);\n\n        enemy.scale = 0.1;\n        enemy.runAction(cc.scaleTo(2,originalScale));\n\n        this.indexEnemy++;\n    }\n\n    KeepGem(mode){\n        this.displayRangeUi.active = this.displayInfoGem.active = false;\n\n        this.gemDisplaying = null;\n        this.slateDisplaying = null;\n\n        this.isKeepGem = true;\n        let gemKeep;\n        let indexKeep = 0;\n\n        // Disable list highlight\n        for(let a of this.listHighlight.children){\n            a.active = false;\n        }\n\n         //keep 1 Gem\n         for(let i = 0 ; i < this.gemsCurrentWay.length; i++){\n            let posS = this.gemsCurrentWay[i].getComponent(Gem).posSquare;\n            for(let j of posS){\n                if(j == this.indexKeepGem){\n                    if(mode === \"slate\"){\n                        let square = this.gemsCurrentWay[i].getComponent(Gem).posSquare;\n                        for(let i = 0;i < square.length; i++){\n                            this.tiles[square[i]].hasGem = false;\n                        }\n                        this.gemsCurrentWay[i].destroy();\n                    }\n                    gemKeep = this.gemsCurrentWay.splice(i,1);\n                    break;\n                }\n            }\n        }  \n\n        //Delete 4 Gem existence to Stone\n        for(let j = 0; j < this.gemsCurrentWay.length ; j++){\n            let stone = cc.instantiate(this.stonePrefab);\n            let square = this.gemsCurrentWay[j].getComponent(Gem).posSquare;\n            stone.setPosition(this.gemsCurrentWay[j].getPosition());\n            stone.getComponent(Stone).posSquare = square;\n            stone.getComponent(Stone).gameController = this;\n            stone.getComponent(Stone).pos = this.gemsCurrentWay[j].getComponent(Gem).pos;\n            this.addStoneInMap.addChild(stone);\n\n            for(let i = 0;i < square.length; i++){\n                this.tiles[square[i]].hasGem = false;\n                this.tiles[square[i]].hasStone = true;\n            }            \n            this.gemsCurrentWay[j].destroy();\n        }\n\n        this.gemsCurrentWay = [];\n\n        this.effectSelectTurnOff();\n        this.startWay();\n    }\n\n    updateUi(){\n\n        // PlayerUi\n        this.roundUI.string = \"Round : \" + this.round.toString();\n        this.enemysWayUI.string = \"Enemy : \" + this.dataWaveEnemy[this.countWay].details.number.toString();\n        this.hpUI.string = \"Hp : \" + this.hp.toString();\n        this.goldUI.string = \"Gold : \" + this.gold.toString();\n        this.levelUI.string = \"Level : \" + this.levelPlayer.toString();\n        this.displayRangeUi.setSiblingIndex(this.mapController.node.childrenCount - 1);\n    }\n\n    resetWay(){\n        this.unscheduleAllCallbacks();\n        \n        this.countWay++;\n        this.countGemCreate = 0;\n        this.btnCreateGem.getComponent(cc.Button).interactable = true;\n        // this.btnCreateGem.active = true;\n        \n        this.isEndWay = false;\n        this.isActiveWay = false;\n        this.countGemCreate = 0;\n        this.isKeepGem = false;\n        this.isPathCanMove = false;\n        // this.blockInPutMap.active = false;\n        this.updateUi();\n    }\n\n    updateListEnemy(){\n        this.enemys = [];\n        \n        let childs = this.addEnemyInMap.children;\n        let length = childs.length;\n\n        for(let i = 0; i < length;i++){\n            let comp = childs[i].getComponent(Enemy);\n            if(comp && !comp.isDie){\n                this.enemys.push(childs[i])\n            }\n        }\n    }\n\n    checkEndWay(){\n        if(this.isActiveWay && this.enemys.length == 0){\n            this.isEndWay = true;\n            this.round++;\n            // this.numOfenemy++;\n\n            this.resetWay();\n        }\n    }\n    showDisplaySlate(pos,name,damage,range,slate,icon){\n        this.slateDisplaying = slate;\n        this.displayInfoSlate.active = true;\n        let posPixel = this.mapController.pixelPosition(pos);\n\n        let iconDisplay = this.displayInfoSlate.getChildByName(\"icon\").getComponent(cc.Sprite);\n\n        this.displayRangeUi.setPosition(cc.v2(posPixel.x + this.tileSize / 2,\n            posPixel.y - this.tileSize / 2));\n\n        let nameDisplay = this.displayInfoSlate.getChildByName(\"stats\")\n        .getChildByName(\"Name\").getComponent(cc.Label);\n        let damageDisplay = this.displayInfoSlate.getChildByName(\"stats\")\n        .getChildByName(\"Damage\").getComponent(cc.Label);\n\n        iconDisplay.spriteFrame = icon;\n\n        nameDisplay.string = name;\n\n        if(damage[0] != damage[1]){\n            damageDisplay.string = \"Damage : \" + damage[0] + \" - \" + damage[1];\n        }else{\n            damageDisplay.string = \"Damage : \" + damage[0] ;\n        }\n    }\n\n    showDisplayGem(pos,name,damage,range,gem,icon){\n        this.gemDisplaying = gem;\n        this.displayRangeUi.active = this.displayInfoGem.active = true;\n        let posPixel = this.mapController.pixelPosition(pos);\n        \n        let iconDisplay = this.displayInfoGem.getChildByName(\"icon\").getComponent(cc.Sprite);\n\n        this.displayRangeUi.setPosition(cc.v2(posPixel.x + this.tileSize / 2,\n            posPixel.y - this.tileSize / 2));\n\n        let nameDisplay = this.displayInfoGem.getChildByName(\"stats\")\n        .getChildByName(\"Name\").getComponent(cc.Label);\n        let damageDisplay = this.displayInfoGem.getChildByName(\"stats\")\n        .getChildByName(\"Damage\").getComponent(cc.Label);\n\n        iconDisplay.spriteFrame = icon;\n\n        if(this.gemDisplaying.getComponent(Gem).isCombined){\n            nameDisplay.string = name;\n        }else{\n            nameDisplay.string = gem.name + \" - \" + name;\n        }\n        \n        if(damage[0] != damage[1]){\n            damageDisplay.string = \"Damage : \" + damage[0] + \" - \" + damage[1];\n        }else{\n            damageDisplay.string = \"Damage : \" + damage[0] ;\n        }\n\n        let combineBtn =  this.displayRangeUi.getChildByName(\"Combine\");\n        combineBtn.active = false;\n\n        this.displayRangeUi.getChildByName(\"Slate\").active = false;\n        \n        let downgradeBtn =  this.displayRangeUi.getChildByName(\"Downgrade\");\n        downgradeBtn.active = false;\n\n        let keepBtn =  this.displayRangeUi.getChildByName(\"Keep\");\n        keepBtn.active = false;\n\n        let upgradeBtn =  this.displayRangeUi.getChildByName(\"Upgrade\");\n        upgradeBtn.active = false;\n\n        this.displayRangeUi.setContentSize(range * 2 - gem.height / 2  , range * 2 - gem.height / 2);\n        \n        let checkLV = this.gemDisplaying.getComponent(Gem).listLevelObj.length;\n        let currentLV = this.gemDisplaying.getComponent(Gem).currentLevel;\n\n        if(this.gemDisplaying.getComponent(Gem).isCombined){\n            if((currentLV >= 1 || currentLV <= checkLV - 1)){            \n                upgradeBtn.active = true;\n            }\n\n            if(currentLV == checkLV){\n                upgradeBtn.active = true;\n                upgradeBtn.getComponent(cc.Button).interactable = false;\n                let stringLabel = upgradeBtn.getChildByName(\"label\").getComponent(cc.Label);\n                stringLabel.string = \"Max Level\";\n            }\n        }else{\n            if(this.checkGemBasicUpgrade() && (currentLV >= 1 || currentLV <= checkLV - 1)){\n                upgradeBtn.active = true;\n            }\n        }\n\n        if(this.countGemCreate == 5 || this.countGemCreate == 0){\n            if(this.countGemCreate == 5 && !this.isKeepGem && this.checkGemInGemsCurrentWay(this.gemDisplaying)){\n                keepBtn.active = true;\n            }\n\n            if(!this.isKeepGem && this.gemDisplaying.getComponent(Gem).currentLevel > 1){\n                if(this.checkGemInGemsCurrentWay(this.gemDisplaying) && \n                !this.gemDisplaying.getComponent(Gem).isCombined){\n                    downgradeBtn.active = true;\n                }\n            }\n\n            // Check Combine Gem Basic\n            if(!this.gemDisplaying.getComponent(Gem).isCombined){\n                let isNeedCheck = true;\n\n                if(this.countGemCreate == 5 && !this.checkGemInGemsCurrentWay(this.gemDisplaying)){\n                    isNeedCheck = false;\n                }\n\n                if(isNeedCheck){\n                    if(this.checkCombineGem()){\n                        combineBtn.active = true;\n                        let stringLabel = combineBtn.getChildByName(\"label\").getComponent(cc.Label);\n                        stringLabel.string = this.gemCombine.Name.toString();\n                    }\n                }\n            }else{\n                combineBtn.active = false;\n            }\n\n            //Check Combine Slate\n            this.listSlateCanCombine = [];\n            if(this.checkSlateCombine()){\n                let arraySlateBtn = this.displayRangeUi.getChildByName(\"Slate\").getChildByName(\"arr\").children;\n                this.displayRangeUi.getChildByName(\"Slate\").active = true;\n\n                for(let a of arraySlateBtn) a.active = false;\n\n                if(arraySlateBtn.length < this.listSlateCanCombine.length){\n                    let numOfCreate = this.listSlateCanCombine.length - arraySlateBtn.length;\n                    for(let i = 0; i < numOfCreate; i++){\n                        let slateClone = cc.instantiate(arraySlateBtn[0]);\n                        slateClone.setPosition(cc.v2(0,0));\n                        this.displayRangeUi.getChildByName(\"Slate\").getChildByName(\"arr\").addChild(slateClone);\n                    }\n                }\n\n                arraySlateBtn = this.displayRangeUi.getChildByName(\"Slate\").getChildByName(\"arr\").children;\n                for(let i = 0; i < this.listSlateCanCombine.length; i++){\n                    arraySlateBtn[i].name = this.listSlateCanCombine[i].toString();\n                }\n\n                for(let i = 0; i < this.listSlateCanCombine.length; i++){\n                    arraySlateBtn[i].active = true;\n                    let stringLabel = arraySlateBtn[i].getChildByName(\"label\").getComponent(cc.Label);\n                    stringLabel.string = this.listSlateCanCombine[i].toString();\n                    // let btn = arraySlateBtn[i].getComponent(cc.Button).clickEvents;\n                    // console.log(btn);\n                }   \n            }else{\n\n            }\n        }\n    }\n\n    checkSlateCombine(){\n        let gemCurrentCheck = this.gemDisplaying;\n\n        //check has gem current click\n        let indexGemDisplay = gemCurrentCheck.getComponent(Gem).index;\n        let isHasSlateInGemDisplay = false;\n\n        let pos = this.gemDisplaying.getComponent(Gem).pos;\n        let indexAround = [( pos.y * this.row + pos.x),\n            (pos.y * this.row + pos.x + 1), \n            ((pos.y + 1) * this.row + pos.x),\n            ((pos.y + 1) * this.row + pos.x + 1)];\n        for(let a of indexAround){\n            if(this.tiles[a].hasSlate){\n                isHasSlateInGemDisplay = true;\n                break;\n            }\n        }\n        \n        if(isHasSlateInGemDisplay){\n            return false;\n        }\n\n        let listCanCombine  = [];\n        \n        //check listCanCombine\n        let type = gemCurrentCheck.getComponent(Gem).Type();\n        for(let a of this.formulaCombineSlate){\n            if(a.List[0][0].toString().toLocaleLowerCase() === gemCurrentCheck.name.toString().toLocaleLowerCase() \n            && (a.List[0][1].toString().toLocaleLowerCase() === type.toString().toLocaleLowerCase() \n            || a.List[0][1].toString().toLocaleLowerCase() === \"\")){\n                listCanCombine.push(a);\n                continue;\n            }\n            for(let b of a.List[1]){\n                if(b[0].toString().toLocaleLowerCase() === gemCurrentCheck.name.toString().toLocaleLowerCase() \n                && (b[1].toString().toLocaleLowerCase() === type.toString().toLocaleLowerCase() \n                || b[1].toString().toLocaleLowerCase() === \"\")){\n                    listCanCombine.push(a);\n                    continue;\n                }                \n            }\n        }\n        if(listCanCombine.length < 0) return false;\n\n        let listGemsToCheck = [];\n\n        if(this.isKeepGem || (!this.isKeepGem && this.countGemCreate == 0)){\n            this.updateListGems();\n            for(let a of this.gems ){\n                listGemsToCheck.push(a);\n            }\n        }else{\n            for(let a of this.gemsCurrentWay ){\n                listGemsToCheck.push(a);\n            }\n        }\n\n        // let indexKCanCombine = 0;\n        let listSlateCanCombine = [];\n\n        for(let k = 0; k < listCanCombine.length;k++){\n            let count = listCanCombine[k].List.length;\n            let tempCount = count;\n            let countTEqual1 = 0;\n            // if(listGemsToCheck.length < count) break;\n\n            let indexC = [];\n            for(let t = 0;t < listCanCombine[k].List.length;t++){\n                if(t == 0){\n                    for(let i = 0; i < listGemsToCheck.length;i++){\n                        let typeCheck = listGemsToCheck[i].getComponent(Gem).Type();\n                            if(listGemsToCheck[i].name.toString().toLocaleLowerCase() == listCanCombine[k].List[t][0].toString().toLocaleLowerCase()\n                            && (typeCheck.toLocaleLowerCase() == listCanCombine[k].List[t][1].toString().toLocaleLowerCase() || listCanCombine[k].List[t][1].toLocaleLowerCase() == \"\")){\n                                let isCanCheck = true;\n                                for(let c of indexC){\n                                    if(c == listGemsToCheck[i].getComponent(Gem).index){\n                                        isCanCheck = false;\n                                        break;   \n                                    }\n                                }\n                                    \n                                if(isCanCheck){\n                                    count--;\n                                    // indexKCanCombine = k;\n                                    indexC.push(listGemsToCheck[i].getComponent(Gem).index);\n                                    break;                            \n                                }\n                            }\n                    }                 \n                }else{\n                    if(count == tempCount){\n                        break;\n                    } \n\n                    for(let r = 0;r < listCanCombine[k].List[1].length;r++){\n                        for(let i = 0; i < listGemsToCheck.length;i++){\n                            let typeCheck = listGemsToCheck[i].getComponent(Gem).Type();\n                                if(listGemsToCheck[i].name.toString().toLocaleLowerCase() == listCanCombine[k].List[t][r][0].toString().toLocaleLowerCase()\n                                && (typeCheck.toLocaleLowerCase() == listCanCombine[k].List[t][r][1].toString().toLocaleLowerCase() || listCanCombine[k].List[t][r][1].toLocaleLowerCase() == \"\")){\n                                    let isCanCheck = true;\n                                    for(let c of indexC){\n                                        if(c == listGemsToCheck[i].getComponent(Gem).index){\n                                            isCanCheck = false;\n                                            break;   \n                                        }\n                                    }                            \n\n                                    if(isCanCheck){\n                                        countTEqual1++;\n                                        // indexKCanCombine = k;\n\n                                        if(indexC.length < 2){\n                                            indexC.push(listGemsToCheck[i].getComponent(Gem).index);\n                                        }\n\n                                        if(indexC[1] > listGemsToCheck[i].getComponent(Gem).index){\n                                            indexC[1] = listGemsToCheck[i].getComponent(Gem).index;\n                                        }\n\n                                        break;                            \n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n\n            if(countTEqual1 > 0){\n                count--;\n            }\n\n            if(count == 0){\n                listSlateCanCombine.push(listCanCombine[k].Name);\n            }\n        }\n\n        if(listSlateCanCombine.length > 0){\n            this.listSlateCanCombine = listSlateCanCombine;\n            // console.log(listSlateCanCombine);\n            return true;\n        }else{\n            return false;\n        }\n        \n    }\n\n    createSlate(event, customEventData){\n        this.indexGem++;\n        let pos = this.gemDisplaying.getComponent(Gem).pos;\n        let posPixel = this.mapController.pixelPosition(pos);\n\n        let nodeName = event.target.name;\n\n        let slate;\n        for(let i = 0; i < this.slateCombinePrefab.length; i++){\n            slate = cc.instantiate(this.slateCombinePrefab[i]);\n            if(slate.name.toLocaleLowerCase() === nodeName.toLocaleLowerCase()){\n                break;\n            }\n        }\n        \n        slate.getComponent(Gem).gameController = this;\n        slate.getComponent(Gem).currentLevel = 1;\n        slate.getComponent(Gem).index = this.indexGem;\n        slate.getComponent(Gem).posSquare = this.gemDisplaying.getComponent(Gem).posSquare;\n        slate.getComponent(Gem).pos = this.gemDisplaying.getComponent(Gem).pos;\n        slate.setPosition(this.gemDisplaying.getPosition());\n        // slate.getChildByName(\"name\").getComponent(cc.Label).string = nodeName;\n\n        // slate.setPosition(cc.v2(posPixel.x + this.tileSize / 2, posPixel.y - this.tileSize / 2));\n        this.addSlateInMap.addChild(slate);\n\n        let indexAround = [( pos.y * this.row + pos.x),\n            (pos.y * this.row + pos.x + 1), \n            ((pos.y + 1) * this.row + pos.x),\n            ((pos.y + 1) * this.row + pos.x + 1)];\n        \n        for(let a of indexAround){\n            this.tiles[a].hasSlate = true;\n        }\n        this.KeepGem(\"slate\");\n\n        this.getPaths(false)\n        this.showPathsMove();\n    }\n\n    checkCombineGem(){\n        let gemCurrentCheck = this.gemDisplaying;\n        this.listGemsRemoveCombine = [];\n        this.gemKeepCombine = null;\n        this.gemCombine = null;\n\n        if(!gemCurrentCheck) return false;\n\n        let listCanCombine  = [];\n        \n        //check listCanCombine\n        let type = gemCurrentCheck.getComponent(Gem).Type();\n        for(let a of this.formulaCombineGem){\n            for(let b of a.List){\n                if(b[0].toString().toLocaleLowerCase() === gemCurrentCheck.name.toString().toLocaleLowerCase() \n                && (b[1].toString().toLocaleLowerCase() === type.toString().toLocaleLowerCase() \n                || b[1].toString().toLocaleLowerCase() === \"\")){\n                    listCanCombine.push(a.Name);\n                }                \n            }\n        }\n\n        if(listCanCombine.length <= 0) return false;\n\n        let listGemsToCheck = [];\n\n        if(this.isKeepGem || (!this.isKeepGem && this.countGemCreate == 0)){\n            this.updateListGems();\n            for(let a of this.gems ){\n                listGemsToCheck.push(a);\n            }\n        }else{\n            for(let a of this.gemsCurrentWay ){\n                listGemsToCheck.push(a);\n            }\n        }\n\n        let listDataCombine = [];\n        for(let i = 0;i < this.formulaCombineGem.length; i++){\n            listDataCombine.push(this.formulaCombineGem[i]);\n        }\n\n        let checkObj = [];\n        for(let a of listDataCombine){\n            let str1 = a.Name.toString().toLocaleLowerCase();\n            for(let b of listCanCombine){\n                let str2 = b.toLocaleLowerCase();\n                if(str1 === str2){\n                    let Name = a.Name;\n                    let List; \n\n                    if(a.List.length == 3){\n                        List = [a.List[0],a.List[1],a.List[2]];\n                    }else if(a.List.length == 4){\n                        List = [a.List[0],a.List[1],a.List[2],a.List[3]];\n                    }\n    \n                    let tempA = {Name,List};\n                    \n                    checkObj.push(tempA);\n                    break;\n                }\n            }\n        }\n\n        let indexKCanCombine = 0;\n\n        for(let k = 0; k < checkObj.length;k++){\n            let count = checkObj[k].List.length;\n\n            if(listGemsToCheck.length < count) break;\n            let indexC = [];\n            for(let a of checkObj[k].List){\n                for(let i = 0; i < listGemsToCheck.length;i++){\n                    let typeCheck = listGemsToCheck[i].getComponent(Gem).Type();\n                    if(listGemsToCheck[i].name.toString().toLocaleLowerCase() == a[0].toString().toLocaleLowerCase()\n                    && (typeCheck.toLocaleLowerCase() == a[1].toString().toLocaleLowerCase() || a[1].toLocaleLowerCase() == \"\")){\n                        let isCanCheck = true;\n                        for(let c of indexC){\n                            if(c == listGemsToCheck[i].getComponent(Gem).index){\n                                isCanCheck = false;\n                                break;   \n                            }\n                        }\n                        if(isCanCheck){\n                            count--;\n                            indexKCanCombine = k;\n                            indexC.push(listGemsToCheck[i].getComponent(Gem).index);\n                            break;                            \n                        }\n                    }\n                }\n            }\n\n            if(count == 0){\n                this.gemCombine = checkObj[indexKCanCombine];\n                this.gemKeepCombine = gemCurrentCheck;\n\n                let nameGemKeepCombine = this.gemKeepCombine.name.toLocaleLowerCase();\n                let typeGemKeepCombine = this.gemKeepCombine.getComponent(Gem).Type().toLocaleLowerCase();\n\n                for(let h = 0;h < listGemsToCheck.length; h++){\n\n                    let in2 = this.gemKeepCombine.getComponent(Gem).index\n                    let in1 = listGemsToCheck[h].getComponent(Gem).index;\n                    if(in1 == in2){\n                        listGemsToCheck.splice(h,1);                        \n                        //need remove 1 checkObj[indexKCanCombine].List\n                        let isNeed = true;\n                        for(let j = 0 ;j < checkObj[indexKCanCombine].List.length; j++){\n                            let nameCheckObj = checkObj[indexKCanCombine].List[j][0].toLocaleLowerCase();\n                            let typeCheckObj = checkObj[indexKCanCombine].List[j][1].toLocaleLowerCase();\n                            if(nameCheckObj === nameGemKeepCombine \n                                && (typeCheckObj === typeGemKeepCombine)){\n                                checkObj[indexKCanCombine].List.splice(j,1);\n                                isNeed = false;\n                                break;    \n                            }\n                        }\n                        if(isNeed){\n                            for(let j = 0 ;j < checkObj[indexKCanCombine].List.length; j++){\n                                let nameCheckObj = checkObj[indexKCanCombine].List[j][0].toLocaleLowerCase();\n                                let typeCheckObj = checkObj[indexKCanCombine].List[j][1].toLocaleLowerCase();\n                                if(nameCheckObj === nameGemKeepCombine \n                                    && (typeCheckObj === \"\")){\n                                    checkObj[indexKCanCombine].List.splice(j,1);\n                                    isNeed = false;\n                                    break;    \n                                }\n                            }\n                        }\n                        break;\n                    }\n                }\n                \n                for(let j = 0 ;j < checkObj[indexKCanCombine].List.length; j++){\n                    let nameCheckObj = checkObj[indexKCanCombine].List[j][0].toLocaleLowerCase();\n                    let typeCheckObj = checkObj[indexKCanCombine].List[j][1].toLocaleLowerCase();\n                    for(let i = listGemsToCheck.length - 1; i > -1 ;i--){\n                        let nameListGemsToCheck = listGemsToCheck[i].name.toLocaleLowerCase();\n                        let typeListGemsToCheck = listGemsToCheck[i].getComponent(Gem).Type().toLocaleLowerCase();\n                        if(nameCheckObj === nameListGemsToCheck\n                        && (typeCheckObj === typeListGemsToCheck || typeCheckObj === \"\")){\n                            // this.listGemsRemoveCombine.push(listGemsToCheck[i]);\n                            let isNeedPush = true;\n                            if(isNeedPush){\n                                this.listGemsRemoveCombine.push(listGemsToCheck[i]);\n                                listGemsToCheck.splice(i,1);\n                                break;\n                            }        \n                        }\n                    }\n                }\n                // console.log(this.listGemsRemoveCombine);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    checkGemBasicUpgrade(){\n        if(this.countGemCreate < 5) return;\n        let listCheck = this.gemsCurrentWay;\n        let a = this.gemDisplaying;\n\n        for(let b of listCheck){\n            if(a.getComponent(Gem).index == b.getComponent(Gem).index) continue;\n\n            if(a.name.toLocaleLowerCase() === b.name.toLocaleLowerCase() &&\n            a.getComponent(Gem).Type().toLocaleLowerCase() == b.getComponent(Gem).Type().toLocaleLowerCase()){\n                return true;\n            }\n    }\n        return false;\n    }\n\n    checkGemInGemsCurrentWay(gem){\n        for(let a of this.gemsCurrentWay){\n            if(a.name == \"\") continue;\n\n            let b = a.getComponent(Gem).pos;\n            let square = [cc.v2(b.x,b.y), cc.v2(b.x+1,b.y), cc.v2(b.x,b.y+1)\n                ,cc.v2(b.x+1,b.y+1)];\n\n            for(let c of square){\n                let gemPos = gem.getComponent(Gem).pos;\n                if(cc.pointEqualToPoint(c,gemPos)){\n                    return true;                    \n                }\n            }\n        }\n        return false;\n    }\n\n    takeDamage(damageEnemy){\n        this.hp -= damageEnemy;\n        if(this.hp <= 0){\n            this.hp = 0;\n            this.updateUi();\n            console.log(\"End Game\");\n        }\n        this.updateUi();\n    }\n\n    downgradeGem(){\n        let gemComp = this.gemDisplaying.getComponent(Gem);\n        gemComp.currentLevel--;\n        // gemComp.updateParameter();\n\n        let pos = gemComp.pos;\n        this.indexKeepGem = pos.y * this.row + pos.x;\n        this.KeepGem(\"gem\");\n    }\n\n    removeGem(gemRemove){\n        let gem;\n        let name = gemRemove.name;\n        if(name){\n            gem = gemRemove;\n        }else{\n            gem = this.gemDisplaying;\n        }\n\n        if(this.checkGemInGemsCurrentWay(gem)){\n            for(let i = 0; i < this.gemsCurrentWay.length; i++){\n                if(this.gemsCurrentWay[i].getComponent(Gem).index\n                == gemRemove.getComponent(Gem).index){\n                    this.gemsCurrentWay.splice(i,1); \n                }\n            }\n        }\n        \n        let square = gem.getComponent(Gem).posSquare;\n        let stone = cc.instantiate(this.stonePrefab);\n        stone.setPosition(gem.getPosition());\n        stone.getComponent(Stone).posSquare = square;\n        stone.getComponent(Stone).gameController = this;\n        stone.getComponent(Stone).pos = gem.getComponent(Gem).pos;\n        this.addGemInMap.addChild(stone);\n\n        for(let i = 0;i < square.length; i++){\n            this.tiles[square[i]].hasGem = false;\n            this.tiles[square[i]].hasStone = true;\n        }\n\n        if(gem.getComponent(GemOpal)){\n            gem.getComponent(GemOpal).removedBuffGemsAround();\n        }\n\n        gem.destroy();\n\n        this.displayRangeUi.active = this.displayInfoGem.active = false;\n        // this.btnRemoveGem.active = false;\n    }\n\n    removeStone(stoneRemove){\n        let stoneNode;\n        let name = stoneRemove.name;\n        if(name){\n            stoneNode = stoneRemove;\n        }else{\n            stoneNode = this.stonePick;\n        }\n        let square = stoneNode.getComponent(Stone).posSquare;\n\n        for(let i = 0;i < square.length; i++){\n            this.tiles[square[i]].hasGem = false;\n            this.tiles[square[i]].hasStone = false;\n        }\n\n        stoneNode.destroy();\n        this.btnRemoveStone.active = false;\n        \n        this.getPaths(false);\n        this.showPathsMove();\n    }\n\n\n    CombineGem(){\n        this.displayRangeUi.active = this.displayInfoGem.active = false;\n\n        this.createGemCombine(this.gemKeepCombine,this.gemCombine.Name);\n\n        for(let a of this.listGemsRemoveCombine){\n            if(a.getComponent(Gem).index != this.gemKeepCombine.getComponent(Gem).index){\n                this.removeGem(a);\n            }   \n        }\n\n        if(this.countGemCreate > 0){\n            this.KeepGem(\"gem\");\n        }\n        \n    }    \n\n    createGemCombine(oldGem,nameNewGem){\n        this.indexGem++;\n        let newGem;\n\n        for(let a of this.gemCombinePrefab){\n            newGem = cc.instantiate(a);\n            if(newGem.name.toLocaleLowerCase() === nameNewGem.toLocaleLowerCase()){\n                break;\n            }\n        }\n        newGem.name = nameNewGem;\n        newGem.getComponent(Gem).pos = oldGem.getComponent(Gem).pos;\n        newGem.getComponent(Gem).gameController = this;\n        newGem.getComponent(Gem).currentLevel = 1;\n        newGem.getComponent(Gem).index = this.indexGem;\n        newGem.getComponent(Gem).isCombined = true;\n        newGem.getComponent(Gem).posSquare = oldGem.getComponent(Gem).posSquare \n        \n        newGem.setPosition(oldGem.getPosition());\n        this.addGemInMap.addChild(newGem);\n        newGem.getChildByName(\"Label\").getComponent(cc.Label).string = nameNewGem.toString();\n        \n        this.gems.push(newGem);\n\n        let pos = newGem.getComponent(Gem).pos;\n        this.indexKeepGem = pos.y * this.row + pos.x;\n\n        if(!this.isKeepGem && this.countGemCreate == 5){\n            this.gemsCurrentWay.push(newGem);\n            for(let i = 0; i < this.gemsCurrentWay.length;i++){\n                if(oldGem.getComponent(Gem).index == this.gemsCurrentWay[i].getComponent(Gem).index){\n                    this.gemsCurrentWay.splice(i,1);\n                    break;\n                }\n            }\n        }\n\n        oldGem.destroy();\n        this.effectSelect = [];\n    }\n\n\n    checkTouchMap(){\n        if(this.touchStart && this.touchMove){\n            let move = cc.pSub(this.touchCurrentPos , this.touchStartPos);\n            move.x /= 3;\n            move.y /= 3;\n\n            let offSetOutMap = 500;  \n\n            let rangeX = (this.mapController.node.width - this.targetCamera.width);\n            if(this.targetCamera.x >= -offSetOutMap && this.targetCamera.x <= rangeX + offSetOutMap){\n                this.targetCamera.x -= move.x;\n                if(this.targetCamera.x < -offSetOutMap ) this.targetCamera.x = -offSetOutMap;\n                if(this.targetCamera.x > rangeX + offSetOutMap) this.targetCamera.x = rangeX + offSetOutMap;\n            }\n\n            let rangeY = (this.targetCamera.height - this.mapController.node.height);\n            if(this.targetCamera.y <= 0 + offSetOutMap && this.targetCamera.y >= rangeY - offSetOutMap){\n                this.targetCamera.y -= move.y;\n                if(this.targetCamera.y > 0 + offSetOutMap ) this.targetCamera.y = offSetOutMap;\n                if(this.targetCamera.y < rangeY - offSetOutMap) this.targetCamera.y = rangeY - offSetOutMap;\n            }\n        }     \n    }\n\n    isKeepBuild(event,customEventData) {\n        // cc.log(customEventData);\n        if(customEventData.toString() === \"ok\"){\n            this.createGem(this.indexAround);\n        }\n        if(customEventData.toString() === \"cancel\"){\n            this.showInput.active = false;\n            // this.showInput.color = cc.Color.RED;\n            this.getPaths(false);\n            this.showPathsMove();\n        }\n        \n        this.btnIsKeepBuild.active = false;\n        \n    }\n\n    upgradeLevelGem(){\n        if(!this.gemDisplaying) return;\n        \n        this.displayRangeUi.active = this.displayInfoGem.active = false;\n        let gemComp = this.gemDisplaying.getComponent(Gem);\n        gemComp.currentLevel++;\n\n        let pos = gemComp.pos;\n        this.indexKeepGem = pos.y * this.row + pos.x;        \n\n        if(!this.gemDisplaying.getComponent(Gem).isCombined) this.KeepGem(\"gem\");\n    }\n\n    upgradeLevelHero(){\n        if(this.levelPlayer < 8){\n            this.levelPlayer++;\n            this.gold -= 20;\n            this.updateUi();\n        }\n    }\n\n    update (dt) {\n        this.checkTouchMap();\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Amethyst extends Gem {\n\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    // nearestEnemy: cc.Node = null;\n    // targetEnemy: cc.Node = null;\n\n    // LIFE-CYCLE CALLBACKS:\n    // critDamage(){\n    //     return this.listLevelObj[this.currentLevel - 1].critDamage;\n    // }\n\n    onLoad () {\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        this.listLevelObj = this.gameController.dataGem.Amethyst.level;\n        this.listArmorObj = this.gameController.dataGem.Amethyst.arrmor;\n    }\n\n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        // this.ani.setCurrentTime(1.8,'AmethystShoot');\n                        this.animState = this.ani.play('AmethystShoot');\n                        this.animState.duration = this.timeCd - 0.1;             \n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }                \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n                \n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;                     \n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n        \n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        // bullet.getComponent(Bullet).critDamage = this.critDamage();\n        this.gameController.mapController.node.addChild(bullet);\n    }\n\n    // update (dt) {}\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemAquamarine extends Gem {\n\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    // targetEnemy: cc.Node = null;\n\n\n    onLoad () {\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        this.listLevelObj = this.gameController.dataGem.Aquamarine.level;\n        this.listArmorObj = this.gameController.dataGem.Aquamarine.arrmor;\n    }\n\n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.animState = this.ani.play('AquamarineShoot');\n                        this.animState.duration = this.timeCd - 0.1;                 \n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }             \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n                \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;                \n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n        \n    }\n\n    // detectNearestEnemy(){\n    //     if(this.listEnemey.length <= 0) return;\n\n    //     this.nearestEnemy = this.listEnemey[0];\n    //     let dis = cc.pDistance(this.nearestEnemy.getPosition(),this.node.getPosition())\n    //     for(let enemy of this.listEnemey){\n    //         let newDis = cc.pDistance(enemy.getPosition(),this.node.getPosition());\n    //         if(newDis < dis){\n    //             dis = newDis;\n    //             this.nearestEnemy = enemy;\n    //         }\n    //     }\n\n    //     if(dis < this.range()){\n    //         this.targetEnemy = this.nearestEnemy;\n    //     }else{\n    //         this.targetEnemy = null;\n    //     }\n    // }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        // bullet.getComponent(Bullet).critDamage = this.critDamage();\n        this.gameController.mapController.node.addChild(bullet);\n    }\n\n    // update (dt) {}\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemBlackOpal extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataGemCombine.length;i++){\n            if(this.gameController.dataGemCombine[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataGemCombine[indexx].Level;\n        this.listArmorObj = this.gameController.dataGemCombine[indexx].arrmor;\n\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        // if(this.gameController.isActiveWay && this.isbuff) this.isbuff = false;\n        \n        if(!this.isbuff && this.buffDMG() > 0){\n            this.checkGemAround(this.rangeBuff());\n            if(this.listGemAround.length > 0){\n                this.buffGemsAround();\n            }\n            this.isbuff = true;\n        }\n\n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.animState = this.ani.play('SilverShoot');\n                        this.animState.duration = this.timeCd - 0.1;\n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }                    \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;                  \n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n        \n    }\n\n    buffGemsAround(){\n        for(let a of this.listGemAround){\n            let c = this.buffDMG();\n            if(a.getComponent(Gem).incrDMG < c)\n            a.getComponent(Gem).incrDMG = c;\n        }\n    }\n\n    removedBuffGemsAround(){\n        for(let a of this.listGemAround){\n            let c = this.buffSDP();\n            if(a.getComponent(Gem).incrDMG = c)\n            a.getComponent(Gem).incrDMG = 0;\n        }\n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Enemy from \"./Enemy\";\nimport Bullet from \"./Bullet\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemBloodStone extends Gem {\n\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n    isCdToDeal :boolean = true;\n    targettedToDeal = null;\n    listEnemeyDps = [];\n    collider: cc.CircleCollider = null;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataGemCombine.length;i++){\n            if(this.gameController.dataGemCombine[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataGemCombine[indexx].Level;\n        this.listArmorObj = this.gameController.dataGemCombine[indexx].arrmor;\n\n        this.collider = this.node.getComponent(cc.CircleCollider);\n        this.collider.enabled = false;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay){\n            return;\n        } \n        if(!this.isCanAttack()) return;\n\n        if(this.currentLevel == 1){\n            this.checkEnemyAroundDPS();\n            this.dpsSkill();\n        }\n        \n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.currentLevel == 2){\n            if(this.listEnemey.length > 0 && this.isCdToDeal){\n                this.dealDmgTargetted();\n            }\n        }\n        \n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n    \n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.animState = this.ani.playAdditive('SilverShoot');\n                        this.animState.duration = this.timeCd - 0.1;\n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                        this.targettedToDeal = this.targetEnemy;\n                    }                    \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;                  \n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n        \n    }\n\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).chanceCrit = this.chanceCrit();\n        bullet.getComponent(Bullet).crit = this.critDamage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    }\n\n    dealDmgTargetted(){\n        this.isCdToDeal = false;\n        \n        if(this.chance(10)){\n            let listTemp = [];\n\n            if(this.listEnemey.length > 3){\n                let numRemove = this.listEnemey.length - 3;\n                for(let i = 0;i < numRemove;i++){\n                    let tempIndex = 0;\n                    for(let j = 0;j < this.listEnemey.length;j++){                  \n                        let temp = this.listEnemey[tempIndex];\n                        let dis = cc.pDistance(temp.getPosition(),this.gameController.endMile);\n                        let newDis = cc.pDistance(this.listEnemey[j].getPosition(),this.gameController.endMile);\n                        if(newDis > dis){\n                            dis = newDis;\n                            temp = this.listEnemey[j];\n                            tempIndex = j;\n                        }\n                    }\n                    this.listEnemey.splice(tempIndex,1);\n                }\n                \n            }\n            for(let a of this.listEnemey){\n                let dmg = 450;\n                let dmgArmor = this.armorDmg * 450;\n                let incr = Math.round(dmg * this.incrDMG / 100);\n                let totalDMG = Math.round((dmg + incr + dmgArmor));\n                a.getComponent(Enemy).takeDame(totalDMG,this.index);\n            }\n        }\n\n        let act1 = cc.callFunc(function () {\n            this.isCdToDeal = true;\n       }, this);\n\n        this.node.runAction(cc.sequence(cc.delayTime(1),act1));\n    }\n\n    \n    \n    chance(per){\n        let max =  1 / (per / 100);\n        let min = 1;\n        let ran = Math.floor(Math.random() * (max - min + 1)) + min;\n        \n        if(ran == 1){\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n    dpsSkill(){\n        if(this.listEnemeyDps.length > 0  && this.isCdDps){\n                let dps = this.node.getChildByName(\"dps\");\n                this.isCdDps = false;\n                // let timeActive = 2;\n                // if(this.currentLevel == 3) timeActive = 0.5;\n                \n                let rangeDPS = this.rangeDPS();\n                dps.setContentSize(rangeDPS * 2,rangeDPS * 2);\n                this.collider.radius = rangeDPS;\n\n                let act1 = cc.callFunc(function () {\n                    this.animState = this.ani.playAdditive('dpsStarRuby');\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    this.collider.enabled = true;\n                }, this);\n\n                let act3 = cc.callFunc(function() {\n                    this.collider.enabled = false;\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdDps = true;\n                }, this);\n\n\n                this.node.runAction(cc.sequence(act1,cc.delayTime(1),act2,cc.delayTime(0.05),act3,cdskill));\n            }\n    }\n\n    checkEnemyAroundDPS(){\n        this.listEnemeyDps = [];\n        \n        if(this.gameController.enemys.length <= 0) return;\n\n        for(let enemy of this.gameController.enemys){\n            let newDis = cc.pDistance(enemy.getPosition(),this.node.getPosition());\n            let range = this.rangeDPS();\n            if(newDis <= range && !enemy.getComponent(Enemy).isDie){\n                this.listEnemeyDps.push(enemy);\n            }\n        }\n    }\n\n    onCollisionEnter(other, self) {\n        if(other.tag != \"1\") return;\n        if(other.node.getComponent(Enemy)){\n            if(!other.node.getComponent(Enemy).isDie){\n                other.node.getComponent(Enemy).takeDame(this.damageDps(),this.index);\n            }\n        }\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemDarkEmerald extends Gem {\n\n   @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataGemCombine.length;i++){\n            if(this.gameController.dataGemCombine[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataGemCombine[indexx].Level;\n        this.listArmorObj = this.gameController.dataGemCombine[indexx].arrmor;\n\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.animState = this.ani.play('SilverShoot');\n                        this.animState.duration = this.timeCd - 0.1;\n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }                    \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;                   \n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n        \n    }\n\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).stun = this.stun();\n        bullet.getComponent(Bullet).chanceStun = this.chanceStun();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        bullet.getComponent(Bullet).crit = this.critDamage();\n        bullet.getComponent(Bullet).chanceCrit = this.chanceCrit();\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemDiamon extends Gem {\n\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        this.listLevelObj = this.gameController.dataGem.Diamon.level;\n        this.listArmorObj = this.gameController.dataGem.Diamon.arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n        \n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.animState = this.ani.play('DiamonShoot');\n                        this.animState.duration = this.timeCd - 0.1;\n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }                    \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;                 \n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        bullet.getComponent(Bullet).crit = this.critDamage();\n        bullet.getComponent(Bullet).chanceCrit = this.chanceCrit();\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import InitData from \"./InitData\";\nimport Bullet from \"./Bullet\";\nimport Gem from \"./Gem\";\nimport Enemy from \"./Enemy\";\nimport BulletPosion from \"./BulletPosion\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemEmerald extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n    \n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n\n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        this.listLevelObj = this.gameController.dataGem.Emerald.level;\n        this.listArmorObj = this.gameController.dataGem.Emerald.arrmor;\n\n    }\n\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.animState = this.ani.play('EmeraldShoot');\n                        this.animState.duration = this.timeCd - 0.1;          \n                    }\n                    \n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n                \n                // let timeCd =  this.cdActiveSkill() - ((this.cdActiveSkill() * this.incrSDP) / 100);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;\n                        \n                        let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                        if(newDis > this.range()){\n                            this.targetEnemy = null;\n                        }                        \n                    }\n                    \n                }, this);\n    \n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n    detectNearestEnemy(){\n        if(this.listEnemey.length <= 0) return;\n\n        this.nearestEnemy = this.listEnemey[0];\n        let dis = cc.pDistance(this.nearestEnemy.getPosition(),this.node.getPosition())\n        for(let enemy of this.listEnemey){\n            let newDis = cc.pDistance(enemy.getPosition(),this.node.getPosition());\n            if(newDis < dis){\n                dis = newDis;\n                this.nearestEnemy = enemy;\n            }\n        }\n\n        if(dis < this.range()){\n            this.targetEnemy = this.nearestEnemy;\n        }else{\n            this.targetEnemy = null;\n        }\n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let posion = cc.instantiate(this.bulletPrefab);\n        posion.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        posion.getComponent(Bullet).target = this.targetEnemy;\n        posion.getComponent(Bullet).damagePosion = this.damagePosion();\n        posion.getComponent(Bullet).damage = this.damage();\n        posion.getComponent(Bullet).slow = this.slow();\n        posion.getComponent(Bullet).timeActive = this.timeActive();\n        posion.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(posion);\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemGold extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataGemCombine.length;i++){\n            if(this.gameController.dataGemCombine[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataGemCombine[indexx].Level;\n        this.listArmorObj = this.gameController.dataGemCombine[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.animState = this.ani.play('SilverShoot');\n                        this.animState.duration = this.timeCd - 0.1;\n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }                    \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;                   \n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        bullet.getComponent(Bullet).crit = this.critDamage();\n        bullet.getComponent(Bullet).chanceCrit = this.chanceCrit();\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Jade extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataGemCombine.length;i++){\n            if(this.gameController.dataGemCombine[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataGemCombine[indexx].Level;\n        this.listArmorObj = this.gameController.dataGemCombine[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.animState = this.ani.play('SilverShoot');\n                        this.animState.duration = this.timeCd - 0.1;\n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }               \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;               \n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n        \n    }\n\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).slow = this.slow();\n        bullet.getComponent(Bullet).damagePosion = this.damagePosion();\n        bullet.getComponent(Bullet).timeActive = this.timeActive();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        bullet.getComponent(Bullet).crit = this.critDamage();\n        bullet.getComponent(Bullet).chanceCrit = this.chanceCrit();\n\n        if(this.currentLevel == 3){\n            bullet.getComponent(Bullet).chanceStun = 1;\n            bullet.getComponent(Bullet).stun = 2;\n        }\n\n        this.gameController.mapController.node.addChild(bullet);\n    } \n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Malachite extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataGemCombine.length;i++){\n            if(this.gameController.dataGemCombine[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataGemCombine[indexx].Level;\n        this.listArmorObj = this.gameController.dataGemCombine[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n        \n        this.checkEnemyAround();\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.listEnemey.length > 0){\n                        this.animState = this.ani.play('SilverShoot');\n                        this.animState.duration = this.timeCd - 0.01;\n                    }\n                    \n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    if(this.listEnemey.length > 0){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdShoot = true;     \n                }, this);\n    \n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n    shoot(){\n        if(!this.listEnemey) return;\n\n        if(this.currentLevel != this.listLevelObj.length){\n            let numRemove;\n            if(this.currentLevel == 1 && this.listEnemey.length > 3){\n                numRemove = this.listEnemey.length - 3;\n            }\n            if(this.currentLevel == 2 && this.listEnemey.length > 4){\n                numRemove = this.listEnemey.length - 4;\n            }\n            for(let i = 0;i < numRemove;i++){\n                for(let j = 0;j < this.listEnemey.length;j++){\n                    if(this.listEnemey[j].getComponent(Enemy).index == this.listEnemey.length){\n                        this.listEnemey.splice(j,1);\n                        break;\n                    }\n                }\n            }\n        }\n        \n        for(let e of this.listEnemey){\n            //create Bullet\n            let bullet = cc.instantiate(this.bulletPrefab);\n            bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n            bullet.getComponent(Bullet).target = e;\n            bullet.getComponent(Bullet).damage = this.damage();\n            bullet.getComponent(Bullet).indexTarget = e.getComponent(Enemy).index;\n            this.gameController.mapController.node.addChild(bullet);\n        }\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\nimport InitData from \"./InitData\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemOpal extends Gem{\n\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    cdTime = 0;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n        \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n    \n    \n     \n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        this.listLevelObj = this.gameController.dataGem.Opal.level;\n        this.listArmorObj = this.gameController.dataGem.Opal.arrmor;\n        \n    }\n\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n        \n        this.checkEnemyAround();\n\n        if(!this.isbuff && this.buffSDP() > 0){\n            this.isbuff = true;\n            \n            let act = cc.callFunc(function() {\n                this.checkGemAround(this.rangeBuff());\n                if(this.listGemAround.length > 0){\n                    this.buffGemsAround();\n                }\n            }, this);\n\n            this.node.runAction(cc.sequence(cc.delayTime(0.1),act));\n        }\n        \n\n        if(!this.gameController.isActiveWay) return;\n        \n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        // this.turret.getPosition();\n                        this.animState = this.ani.play('OpalShoot');\n                        this.animState.duration = this.timeCd - 0.1;            \n                    }\n                    \n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n                \n                // let timeCd =  this.cdActiveSkill() - ((this.cdActiveSkill() * this.incrSDP) / 100);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;\n                        \n                        let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                        if(newDis > this.range()){\n                            this.targetEnemy = null;\n                        }                \n                    }\n                    \n                }, this);\n    \n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n    buffGemsAround(){\n        for(let a of this.listGemAround){\n            let c = this.buffSDP();;\n            a.getComponent(Gem).BuffByOpal = this.buffSDP();\n\n            if(a.getComponent(Gem).incrSDP < c)\n                a.getComponent(Gem).incrSDP = c;\n        }\n    }\n\n    removedBuffGemsAround(){\n        for(let a of this.listGemAround){\n            let c = this.buffSDP();\n            if(a.getComponent(Gem).incrSDP = c)\n            a.getComponent(Gem).incrSDP = 0;\n        }\n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemParaibaTourmaline extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n    isCdToDeal :boolean = true;\n    targettedToDeal = null;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataGemCombine.length;i++){\n            if(this.gameController.dataGemCombine[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataGemCombine[indexx].Level;\n        this.listArmorObj = this.gameController.dataGemCombine[indexx].arrmor;\n\n\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay){\n            return;\n        } \n        if(!this.isCanAttack()) return;\n        \n        if(!this.isbuff && this.buffDMG() > 0){\n            this.checkGemAround(this.rangeBuff());\n            if(this.listGemAround.length > 0){\n                this.buffGemsAround();\n            }\n            this.isbuff = true;\n        }\n\n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n            this.targettedToDeal = this.targetEnemy;\n        }\n\n        if(this.listEnemey.length > 0  && this.targettedToDeal && this.targettedToDeal != \"\" && this.isCdToDeal){\n            this.dealDmgTargetted();\n        }else{\n            // this.isCdToDeal = true;\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.animState = this.ani.play('SilverShoot');\n                        this.animState.duration = this.timeCd - 0.1;\n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                        this.targettedToDeal = this.targetEnemy;\n                    }                    \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;                  \n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n        \n    }\n\n    buffGemsAround(){\n        for(let a of this.listGemAround){\n            let c = this.buffDMG();\n            if(a.getComponent(Gem).incrDMG < c)\n            a.getComponent(Gem).incrDMG = c;\n        }\n    }\n\n    removedBuffGemsAround(){\n        for(let a of this.listGemAround){\n            let c = this.buffSDP();\n            if(a.getComponent(Gem).incrDMG = c)\n            a.getComponent(Gem).incrDMG = 0;\n        }\n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    }\n\n    dealDmgTargetted(){\n        this.isCdToDeal = false;\n\n        if(this.chance(20)){\n            if(this.currentLevel == 1){\n                let dmg = Math.round((this.armorDmg * 250) + 250);\n                let incr = Math.round(dmg * this.incrDMG / 100);\n                let totalDMG = Math.round((dmg + incr ));\n                this.targetEnemy.getComponent(Enemy).takeDame(totalDMG,this.index);\n            }\n\n            if(this.currentLevel == 2){\n                let dmg = Math.round((this.armorDmg * 350) + 350);\n                this.targetEnemy.getComponent(Enemy).takeDame(dmg,this.index);\n            }\n        }\n        let act1 = cc.callFunc(function () {\n            this.isCdToDeal = true;\n       }, this);\n\n        this.node.runAction(cc.sequence(cc.delayTime(1),act1));\n    }\n\n    \n    \n    chance(per){\n        let max =  1 / (per / 100);\n        let min = 1;\n        let ran = Math.floor(Math.random() * (max - min + 1)) + min;\n        \n        if(ran == 1){\n            return true;\n        }else{\n            return false;\n        }\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemPinkDiamond extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataGemCombine.length;i++){\n            if(this.gameController.dataGemCombine[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataGemCombine[indexx].Level;\n        this.listArmorObj = this.gameController.dataGemCombine[indexx].arrmor;\n\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.animState = this.ani.play('SilverShoot');\n                        this.animState.duration = this.timeCd - 0.1;\n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }                    \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;\n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        bullet.getComponent(Bullet).crit = this.critDamage();\n        bullet.getComponent(Bullet).chanceCrit = this.chanceCrit();\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Enemy from \"./Enemy\";\nimport Bullet from \"./Bullet\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemRedCrysta extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n    listEnemeyDps = [];\n    collider: cc.CircleCollider = null;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataGemCombine.length;i++){\n            if(this.gameController.dataGemCombine[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataGemCombine[indexx].Level;\n        this.listArmorObj = this.gameController.dataGemCombine[indexx].arrmor;\n\n        this.collider = this.node.getComponent(cc.CircleCollider);\n        this.collider.enabled = false;\n\n        // this.updateParameter();\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkEnemyAroundDPS();\n        this.dpsSkill();\n\n\n        if(this.minDamage() <= 0) return;\n\n        this.checkEnemyAround();\n        \n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n            this.isCdShoot = false;\n            let tempTime = this.cdActiveSkill();\n            this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n            if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n            let act1 = cc.callFunc(function () {\n                if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                    this.animState = this.ani.playAdditive('SilverShoot');\n                    this.animState.duration = this.timeCd - 0.1;\n                }\n            }, this);\n\n            let act2 = cc.callFunc(function() {\n                let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                if(newDis > this.range()){\n                    this.targetEnemy = null;\n                    this.detectNearestEnemy();\n                }                    \n\n                if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                    this.shoot();\n                }\n            }, this);\n\n            let cdskill = cc.callFunc(function() {\n                if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                    this.isCdShoot = true;                     \n                }\n            }, this);\n            this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n        }\n\n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    }\n    \n    dpsSkill(){\n        if(this.listEnemeyDps.length > 0  && this.isCdDps){\n                let dps = this.node.getChildByName(\"dps\");\n                this.isCdDps = false;\n                // let timeActive = 1;\n                // if(this.currentLevel == 3) timeActive = 0.5;\n                \n                let rangeDPS = this.rangeDPS();\n                // let scale = rangeDPS / dps.getContentSize().width;\n                \n                // dps.setScale(1,1);\n                // dps.runAction(cc.scaleTo(scale,0.2));\n\n                dps.setContentSize(rangeDPS * 2,rangeDPS * 2);\n                this.collider.radius = rangeDPS;\n\n                let act1 = cc.callFunc(function () {\n                    this.animState = this.ani.playAdditive('dpsStarRuby');\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    this.collider.enabled = true;\n                }, this);\n\n                let act3 = cc.callFunc(function() {\n                    this.collider.enabled = false;\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdDps = true;\n                }, this);\n\n                this.node.runAction(cc.sequence(act1,cc.delayTime(1),act2,cc.delayTime(0.05),act3,cdskill));\n            }\n    }\n\n    checkEnemyAroundDPS(){\n        this.listEnemeyDps = [];\n        \n        if(this.gameController.enemys.length <= 0) return;\n\n        for(let enemy of this.gameController.enemys){\n            let newDis = cc.pDistance(enemy.getPosition(),this.node.getPosition());\n            let range = this.rangeDPS();\n            if(newDis <= range && !enemy.getComponent(Enemy).isDie){\n                this.listEnemeyDps.push(enemy);\n            }\n        }\n    }\n\n    onCollisionEnter(other, self) {\n        if(other.tag != \"1\") return;\n        if(other.node.getComponent(Enemy)){\n            if(!other.node.getComponent(Enemy).isDie){\n                other.node.getComponent(Enemy).takeDame(this.damageDps(),this.index);\n                // console.log(\"Take Dame\");\n            }\n        }\n    }\n}\n","import Gem from \"./Gem\";\n// import Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\nimport SplashBullet from \"./SplashBullet\";\nimport InitData from \"./InitData\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemRuby extends Gem {\n\n   \n    @property(cc.Prefab)\n    SplashBullet: cc.Prefab = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n    cdTime = 0;\n        \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n    \n    \n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        this.listLevelObj = this.gameController.dataGem.Ruby.level;\n        this.listArmorObj = this.gameController.dataGem.Ruby.arrmor;\n\n        \n        this.updateParameter();\n    }\n\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkEnemyAround();\n\n        if(!this.gameController.isActiveWay) return;\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        // this.ani.setCurrentTime(1.8,'OpalShoot');\n                        this.animState = this.ani.play('RubyShoot');\n                        this.animState.duration = this.timeCd - 0.1;             \n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }\n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n                \n                // let timeCd =  this.cdActiveSkill() - ((this.cdActiveSkill() * this.incrSDP) / 100);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;\n                    }\n                    \n                }, this);\n    \n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n    detectNearestEnemy(){\n        if(this.listEnemey.length <= 0) return;\n        this.nearestEnemy = this.listEnemey[0];\n        let dis = cc.pDistance(this.nearestEnemy.getPosition(),this.node.getPosition())\n        for(let enemy of this.listEnemey){\n            let newDis = cc.pDistance(enemy.getPosition(),this.node.getPosition());\n            if(newDis < dis){\n                dis = newDis;\n                this.nearestEnemy = enemy;\n            }\n        }\n\n        if(dis < this.range()){\n            this.targetEnemy = this.nearestEnemy;\n        }else{\n            this.targetEnemy = null;\n        }\n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.SplashBullet);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(SplashBullet).target = this.targetEnemy;\n        bullet.getComponent(SplashBullet).damage = this.damage();\n        bullet.getComponent(SplashBullet).nameExplosion = 'RubyExplosion';\n        bullet.getComponent(SplashBullet).gameController = this.gameController;\n        bullet.getComponent(SplashBullet).splashTile = this.splashRange();\n        bullet.getComponent(SplashBullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\nimport InitData from \"./InitData\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemSapphire extends Gem {\n\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n    // cdTime = 0;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n    slow(){\n        return this.listLevelObj[this.currentLevel - 1].slow;\n    }\n\n    timeActive(){\n        return this.listLevelObj[this.currentLevel - 1].timeActive;\n    }\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        this.listLevelObj = this.gameController.dataGem.Sapphire.level;\n        this.listArmorObj = this.gameController.dataGem.Sapphire.arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n    \n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        // this.ani.setCurrentTime(1.8,'SapphireShoot');\n                        this.animState = this.ani.play('SapphireShoot');\n                        this.animState.duration = this.timeCd - 0.1;\n                        // this.animState.speed = 0.1;\n                        // this.node.runAction(cc.delayTime(1.8));                        \n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }\n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n                \n                // let timeCd =  this.cdActiveSkill() - ((this.cdActiveSkill() * this.incrSDP) / 100);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;       \n                    }\n                    \n                }, this);\n    \n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        bullet.getComponent(Bullet).slow = this.slow();\n        bullet.getComponent(Bullet).timeActive = this.timeActive();\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\nimport SplashBullet from \"./SplashBullet\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemSilver extends Gem {\n\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataGemCombine.length;i++){\n            if(this.gameController.dataGemCombine[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataGemCombine[indexx].Level;\n        this.listArmorObj = this.gameController.dataGemCombine[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.animState = this.ani.play('SilverShoot');\n                        this.animState.duration = this.timeCd - 0.1;\n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }                    \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;      \n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n        \n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(SplashBullet).target = this.targetEnemy;\n        bullet.getComponent(SplashBullet).damage = this.damage();\n        bullet.getComponent(SplashBullet).gameController = this.gameController;\n        bullet.getComponent(SplashBullet).nameExplosion = 'SilverExplosion';\n        bullet.getComponent(SplashBullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        bullet.getComponent(SplashBullet).slow = this.slow();\n        bullet.getComponent(SplashBullet).splashTile = this.splashRange();\n        bullet.getComponent(SplashBullet).timeActive = this.timeActive();\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Enemy from \"./Enemy\";\nimport Bullet from \"./Bullet\";\n\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemStarRuby extends Gem {\n\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n    listEnemeyDps = [];\n    collider: cc.CircleCollider = null;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataGemCombine.length;i++){\n            if(this.gameController.dataGemCombine[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataGemCombine[indexx].Level;\n        this.listArmorObj = this.gameController.dataGemCombine[indexx].arrmor;\n\n        this.collider = this.node.getComponent(cc.CircleCollider);\n        this.collider.enabled = false;\n\n        // this.updateParameter();\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkEnemyAroundDPS();\n        this.dpsSkill();\n\n\n        if(this.minDamage() <= 0) return;\n\n        this.checkEnemyAround();\n        \n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n            this.isCdShoot = false;\n            let tempTime = this.cdActiveSkill();\n            this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n            if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n            let act1 = cc.callFunc(function () {\n                if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                    this.animState = this.ani.playAdditive('SilverShoot');\n                    this.animState.duration = this.timeCd - 0.1;\n                }\n            }, this);\n\n            let act2 = cc.callFunc(function() {\n                let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                if(newDis > this.range()){\n                    this.targetEnemy = null;\n                    this.detectNearestEnemy();\n                }                    \n\n                if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                    this.shoot();\n                }\n            }, this);\n\n            let cdskill = cc.callFunc(function() {\n                if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                    this.isCdShoot = true;           \n                }\n            }, this);\n            this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n        }\n\n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        bullet.getComponent(Bullet).crit = this.critDamage();\n        bullet.getComponent(Bullet).chanceCrit = this.chanceCrit();\n        this.gameController.mapController.node.addChild(bullet);\n    }\n    \n    dpsSkill(){\n        if(this.listEnemeyDps.length > 0  && this.isCdDps){\n                let dps = this.node.getChildByName(\"dps\");\n                this.isCdDps = false;\n                // let timeActive = 2;\n                // if(this.currentLevel == 3) timeActive = 0.5;\n                \n                let rangeDPS = this.rangeDPS();\n                dps.setContentSize(rangeDPS * 2,rangeDPS * 2);\n                this.collider.radius = rangeDPS;\n\n                let act1 = cc.callFunc(function () {\n                    this.animState = this.ani.playAdditive('dpsStarRuby');\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    this.collider.enabled = true;\n                }, this);\n\n                let act3 = cc.callFunc(function() {\n                    this.collider.enabled = false;\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdDps = true;\n                }, this);\n\n                this.node.runAction(cc.sequence(act1,cc.delayTime(1),act2,cc.delayTime(0.05),act3,cdskill));\n            }\n    }\n\n    checkEnemyAroundDPS(){\n        this.listEnemeyDps = [];\n        \n        if(this.gameController.enemys.length <= 0) return;\n\n        for(let enemy of this.gameController.enemys){\n            let newDis = cc.pDistance(enemy.getPosition(),this.node.getPosition());\n            let range = this.rangeDPS();\n            if(newDis <= range && !enemy.getComponent(Enemy).isDie){\n                this.listEnemeyDps.push(enemy);\n            }\n        }\n    }\n\n    onCollisionEnter(other, self) {\n        if(other.tag != \"1\") return;\n        if(other.node.getComponent(Enemy)){\n            if(!other.node.getComponent(Enemy).isDie){\n                other.node.getComponent(Enemy).takeDame(this.damageDps(),this.index);\n            }\n        }\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\nimport InitData from \"./InitData\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemTopaz extends Gem{\n\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n\n    cdTime = 0;\n        \n    nearestEnemy: cc.Node = null;\n    \n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        this.listLevelObj = this.gameController.dataGem.Topaz.level;\n        this.listArmorObj = this.gameController.dataGem.Topaz.arrmor;\n    }\n\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n        \n        this.checkEnemyAround();\n\n        if(this.damage() > 0 && this.listEnemey.length > 0 && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.listEnemey.length > 0){\n                        this.ani.setCurrentTime(1.8,'TopazShoot');\n                        this.animState = this.ani.play('TopazShoot');\n                        this.animState.duration = this.timeCd - 0.01;\n                    }\n                    \n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    if(this.listEnemey.length > 0){\n                        this.shoot();\n                    }\n                }, this);\n                \n                // let timeCd =  this.cdActiveSkill() - ((this.cdActiveSkill() * this.incrSDP) / 100);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdShoot = true;\n                }, this);\n    \n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n    shoot(){\n        if(!this.listEnemey) return;\n        \n        for(let e of this.listEnemey){\n            //create Bullet\n            let bullet = cc.instantiate(this.bulletPrefab);\n            bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n            bullet.getComponent(Bullet).target = e;\n            bullet.getComponent(Bullet).damage = this.damage();\n            bullet.getComponent(Bullet).indexTarget = e.getComponent(Enemy).index;\n            this.gameController.mapController.node.addChild(bullet);\n        }\n    }\n}\n","import Gem from \"./Gem\";\nimport Enemy from \"./Enemy\";\nimport Bullet from \"./Bullet\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemUranium238 extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n    isCdToDeal :boolean = true;\n    targettedToDeal = null;\n    listEnemeyDps = [];\n    listEnemeyBurn = [];\n    collider: cc.CircleCollider = null;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataGemCombine.length;i++){\n            if(this.gameController.dataGemCombine[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataGemCombine[indexx].Level;\n        this.listArmorObj = this.gameController.dataGemCombine[indexx].arrmor;\n\n        this.collider = this.node.getComponent(cc.CircleCollider);\n        this.collider.enabled = false;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay){\n            return;\n        } \n        if(!this.isCanAttack()) return;\n\n        if(this.currentLevel == 2){\n            this.checkEnemyAroundDPS();\n            this.dpsSkill();\n        }\n        \n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        this.checkEnemyAroundBurn();\n        this.burnTargetted();\n        \n        \n        if(this.damage() > 0){\n            if(this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n    \n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.animState = this.ani.playAdditive('SilverShoot');\n                        this.animState.duration = this.timeCd - 0.1;\n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                        this.targettedToDeal = this.targetEnemy;\n                    }                    \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;                  \n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n        } \n    }\n\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).chanceCrit = this.chanceCrit();\n        bullet.getComponent(Bullet).crit = this.critDamage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    }\n\n    burnTargetted(){\n        if(this.listEnemeyBurn.length > 0  && this.isCdToDeal){\n            this.isCdToDeal = false;\n        \n            for(let a of this.listEnemeyBurn){\n                let dmg = Math.round((this.armorDmg * 200) + 200);\n                let incr = Math.round(dmg * this.incrDMG / 100);\n                let totalDMG = Math.round((dmg + incr ));\n                a.getComponent(Enemy).takeDame(totalDMG,this.index);\n                a.getComponent(Enemy).slow(50,1);\n            }\n    \n            let act1 = cc.callFunc(function () {\n                this.isCdToDeal = true;\n           }, this);\n    \n            this.node.runAction(cc.sequence(cc.delayTime(1),act1));\n        }\n    }\n\n    \n    \n    chance(per){\n        let max =  1 / (per / 100);\n        let min = 1;\n        let ran = Math.floor(Math.random() * (max - min + 1)) + min;\n        \n        if(ran == 1){\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n    dpsSkill(){\n        if(this.listEnemeyDps.length > 0  && this.isCdDps){\n                let dps = this.node.getChildByName(\"dps\");\n                this.isCdDps = false;\n                \n                let rangeDPS = this.rangeDPS();\n                dps.setContentSize(rangeDPS * 2,rangeDPS * 2);\n                this.collider.radius = rangeDPS;\n\n                let act1 = cc.callFunc(function () {\n                    this.animState = this.ani.playAdditive('dpsStarRuby');\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    this.collider.enabled = true;\n                }, this);\n\n                let act3 = cc.callFunc(function() {\n                    this.collider.enabled = false;\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdDps = true;\n                }, this);\n\n\n                this.node.runAction(cc.sequence(act1,cc.delayTime(1),act2,cc.delayTime(0.05),act3,cdskill));\n            }\n    }\n\n    checkEnemyAroundDPS(){\n        this.listEnemeyDps = [];\n        \n        if(this.gameController.enemys.length <= 0) return;\n\n        for(let enemy of this.gameController.enemys){\n            let newDis = cc.pDistance(enemy.getPosition(),this.node.getPosition());\n            let range = this.rangeDPS();\n            if(newDis <= range && !enemy.getComponent(Enemy).isDie){\n                this.listEnemeyDps.push(enemy);\n            }\n        }\n    }\n\n    checkEnemyAroundBurn(){\n        this.listEnemeyBurn = [];\n        \n        if(this.gameController.enemys.length <= 0) return;\n\n        for(let enemy of this.gameController.enemys){\n            let newDis = cc.pDistance(enemy.getPosition(),this.node.getPosition());\n            if(newDis <= this.rangeBurn() && !enemy.getComponent(Enemy).isDie){\n                this.listEnemeyBurn.push(enemy);\n            }\n        }\n    }\n\n    onCollisionEnter(other, self) {\n        if(other.tag != \"1\") return;\n        if(other.node.getComponent(Enemy)){\n            if(!other.node.getComponent(Enemy).isDie){\n                other.node.getComponent(Enemy).takeDame(this.damageDps());\n            }\n        }\n    }\n}\n","import Gem from \"./Gem\";\nimport SplashBullet from \"./SplashBullet\";\nimport Enemy from \"./Enemy\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GemYellowSapphire extends Gem {\n\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataGemCombine.length;i++){\n            if(this.gameController.dataGemCombine[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataGemCombine[indexx].Level;\n        this.listArmorObj = this.gameController.dataGemCombine[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        // if(this.gameController.isActiveWay && this.isbuff) this.isbuff = false;\n        \n        if(!this.isbuff && this.buffDMG() > 0){\n            this.checkGemAround(this.rangeBuff());\n            if(this.listGemAround.length > 0){\n                this.buffGemsAround();\n            }\n            this.isbuff = true;\n        }\n\n        this.checkEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){            \n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n                let act1 = cc.callFunc(function () {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.animState = this.ani.play('SilverShoot');\n                        this.animState.duration = this.timeCd - 0.1;\n                    }\n                }, this);\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }                    \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;             \n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act1,act2,cc.delayTime(this.timeCd),cdskill));\n            }\n        \n    }\n\n    buffGemsAround(){\n        for(let a of this.listGemAround){\n            let c = this.buffDMG();\n            if(a.getComponent(Gem).incrDMG < c)\n            a.getComponent(Gem).incrDMG = c;\n        }\n    }\n\n    removedBuffGemsAround(){\n        for(let a of this.listGemAround){\n            let c = this.buffSDP();\n            if(a.getComponent(Gem).incrDMG = c)\n            a.getComponent(Gem).incrDMG = 0;\n        }\n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(SplashBullet).target = this.targetEnemy;\n        bullet.getComponent(SplashBullet).damage = this.damage();\n        bullet.getComponent(SplashBullet).gameController = this.gameController;\n        bullet.getComponent(SplashBullet).nameExplosion = 'SilverExplosion';\n        bullet.getComponent(SplashBullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        bullet.getComponent(SplashBullet).slow = this.slow();\n        bullet.getComponent(SplashBullet).splashTile = this.splashRange();\n        bullet.getComponent(SplashBullet).timeActive = this.timeActive();\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import GameController from \"./GameController\";\nimport Enemy from \"./Enemy\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Gem extends cc.Component {\n    pos: cc.Vec2 = null;\n    posSquare = [];\n    gameController : GameController = null;\n    isCdShoot: boolean = true;\n    isCdDps: boolean = true;\n    // isLoadJson: boolean = false;\n    ani : cc.Animation = null;\n    animState: cc.AnimationState  = null;\n    icon: cc.SpriteFrame = null;\n    index:number = 0;\n    targetEnemy: cc.Node = null;\n    nearestEnemy: cc.Node = null;\n\n    BuffByOpal = 0;\n\n    listEnemey = [];\n    \n    listLevelObj = [];\n\n    listArmorObj = [];\n\n    listGemAround = [];\n\n    currentLevel = 0;\n    \n    incrSDP = 0;\n\n    incrDMG = 0;\n\n    numSelfKill = 0;\n\n    isCombined : boolean = false;\n\n    timeCd = 1;\n\n    armorDmg = 0;\n    \n    maxCd = 0.05;\n\n    isbuff: boolean = false;\n\n    chanceCrit(){\n        return this.listLevelObj[this.currentLevel - 1].chanceCrit;\n    }\n\n    chanceStun(){\n        return this.listLevelObj[this.currentLevel - 1].chanceStun;\n    }\n\n    stun(){\n        return this.listLevelObj[this.currentLevel - 1].stun;\n    }\n    \n    cost(){\n        return this.listLevelObj[this.currentLevel - 1].costUpgrade;\n    }\n\n    range(){\n        let range = this.listLevelObj[this.currentLevel - 1].range * this.gameController.tileSize * 2;\n        return ((range + (this.node.height / 2)));\n    }\n\n    rangeDPS(){\n        let rangeDps = this.listLevelObj[this.currentLevel - 1].dpsTile * this.gameController.tileSize * 2;\n        return ((rangeDps + (this.node.height / 2)));\n    }\n\n    rangeBurn(){\n        let rangeBurn = this.listLevelObj[this.currentLevel - 1].burnTile * this.gameController.tileSize * 2;\n        return ((rangeBurn + (this.node.height / 2)));\n    }\n\n    cdActiveSkill(){\n        return  ((this.listLevelObj[this.currentLevel - 1].speed / 30));\n    }\n\n    damage(){\n        let min = this.minDamage();\n        let max = this.maxDamage();\n        let dmg = Math.floor(Math.random() * (max - min + 1)) + min;\n        let incr = Math.round(dmg * this.incrDMG / 100);\n        let dmgArmor =  dmg * this.armorDmg;\n        let totalDMG = Math.round((dmg + incr + dmgArmor));\n        return totalDMG;\n    }\n\n    minDamage(){\n        return this.listLevelObj[this.currentLevel - 1].damageMin;\n    }\n\n    maxDamage(){\n        return this.listLevelObj[this.currentLevel - 1].damageMax;\n    }\n\n    Type(){\n        return this.listLevelObj[this.currentLevel - 1].name;\n    }\n\n    slow(){\n        return this.listLevelObj[this.currentLevel - 1].slow;\n    }\n\n    timeActive(){\n        return this.listLevelObj[this.currentLevel - 1].timeActive;\n    }\n\n    splashRange(){\n        return this.listLevelObj[this.currentLevel - 1].splashTile;\n    }\n\n    critDamage(){\n        return this.listLevelObj[this.currentLevel - 1].critDamage;\n    }\n    \n    damageDps(){\n        let dmgDPS = this.listLevelObj[this.currentLevel - 1].damageDps;\n        let dmgArmor =  dmgDPS * this.armorDmg;\n        let incr = Math.round(dmgDPS * this.incrDMG / 100);\n        let totalDMG = Math.round((dmgDPS + incr + dmgArmor));\n        return totalDMG;\n    }\n\n    damagePosion(){\n        let dmgPosion = this.listLevelObj[this.currentLevel - 1].damagePosion;\n        let dmgArmor =  dmgPosion * this.armorDmg;\n        let totalDMG = Math.round((dmgPosion + dmgArmor));\n        return totalDMG;\n    }\n\n    buffSDP(){\n        return this.listLevelObj[this.currentLevel - 1].increaseSDP;\n    }\n\n    buffDMG(){\n        return this.listLevelObj[this.currentLevel - 1].increaseDMG;\n    }\n   \n    rangeBuff(){\n        return this.listLevelObj[this.currentLevel - 1].rangeIncre * (this.gameController.tileSize * 2);\n    }   \n\n    isCanAttack(){\n        let check = this.listLevelObj[this.currentLevel - 1].typeAttack;\n        if(check !== \"both\"){\n            if(check == \"air\" && this.gameController.isFlyEnemyNextWay){\n                return true;\n            }else if(check == \"ground\" && !this.gameController.isFlyEnemyNextWay){\n                return true;\n            }else{\n                return false;\n            }    \n        }else{\n            return true;\n        }\n    }\n\n    checkEnemyAround(){\n        this.listEnemey = [];\n        \n        if(this.gameController.enemys.length <= 0) return;\n\n        for(let enemy of this.gameController.enemys){\n            let newDis = cc.pDistance(enemy.getPosition(),this.node.getPosition());\n            if(newDis <= this.range() && !enemy.getComponent(Enemy).isDie){\n                this.listEnemey.push(enemy);\n            }\n        }\n    }\n\n    checkGemAround(range){\n        if(this.gameController.gems.length <= 0) return;\n        this.listGemAround = [];\n        for(let a of this.gameController.gems){\n            let newDis = cc.pDistance(a.getPosition(),this.node.getPosition());\n            let b = range;\n            if(newDis <= b){\n                if(a.getComponent(Gem).pos.x == this.pos.x && \n                a.getComponent(Gem).pos.y == this.pos.y) continue;\n\n                this.listGemAround.push(a);\n            }\n        }\n    }\n\n    updateParameter(){\n        this.cost();\n        this.range();\n        this.cdActiveSkill();\n        this.damage();\n        this.Type();\n    }\n\n    detectNearestEnemy(){\n        if(this.listEnemey.length <= 0) return;\n\n        this.nearestEnemy = this.listEnemey[0];\n        \n        let dis = cc.pDistance(this.nearestEnemy.getPosition(),this.gameController.endMile);\n        for(let enemy of this.listEnemey){\n            let newDis = cc.pDistance(enemy.getPosition(),this.gameController.endMile);\n            if(newDis < dis){\n                dis = newDis;\n                this.nearestEnemy = enemy;\n            }\n        }\n\n        this.targetEnemy = this.nearestEnemy;\n    }\n\n}\n","// Learn TypeScript:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class HitDamage extends cc.Component {\n\n    // @property(cc.Label)\n    label: cc.Label = null;\n    damageDisplay: number = 0;\n\n    // @property\n    // text: string = 'hello';\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.label = this.node.getComponent(cc.Label);\n        this.label.string = this.damageDisplay.toString();\n        \n        this.node.runAction(cc.spawn(cc.moveBy(1, cc.v2(0,20)),cc.fadeOut(1)));\n\n        this.node.runAction(cc.sequence(cc.delayTime(1), cc.callFunc(function () {\n            this.node.destroy();\n        }, this)));\n    }\n\n    start () {\n\n    }\n\n    // update (dt) {}\n}\n","// export const Level = cc.Enum({\n//     Chipped: 1,\n//     Flawed: 2,\n//     Normal: 3,\n//     Flawless: 4,\n//     Perfect: 5\n// })\n\n// export class LevelDefine {\n//     level = Level.Chipped;\n// }\n\nexport default class InitData{   \n\npublic static maxLevelGem = 6;\npublic static mileWays = [cc.v2(3,3),cc.v2(3,11),cc.v2(3,20),cc.v2(22,20),cc.v2(41,20),cc.v2(41,10),cc.v2(22,10),cc.v2(22,20),cc.v2(22,40),cc.v2(41,40),cc.v2(41,50)];\n\npublic static ranLevelGem(currentLvPlayer){\n    let ran = Math.random();\n    switch (currentLvPlayer){\n        case 0:{\n            return 1;\n        }\n        case 1:{\n            return 1;\n            // if(ran <= 0.7){\n            //     return 1;\n            // }else{\n            //     return 2;\n            // }\n        }\n        case 2:{\n            return 2;\n            // if(ran <= 0.6){\n            //     return 1;\n            // }else if(ran <= 0.9){\n            //     return 2;\n            // }else{\n            //     return 3;\n            // }\n        }\n        case 3:{\n            return 3;\n            // if(ran <= 0.5){\n            //     return 1;\n            // }else if(ran <= 0.8){\n            //     return 2;\n            // }else{\n            //     return 3;\n            // }\n        }\n        case 4:{\n            return 4;\n            // if(ran <= 0.4){\n            //     return 1;\n            // }else if(ran <= 0.7){\n            //     return 2;\n            // }else if(ran <= 0.9){\n            //     return 3;\n            // }else{\n            //     return 4;\n            // }\n        }\n        case 5:{\n            if(ran <= 0.3){\n                return 1;\n            }else if(ran <= 0.6){\n                return 2;\n            }else if(ran <= 0.9){\n                return 3;\n            }else{\n                return 4;\n            }\n        }\n        case 6:{\n            if(ran <= 0.2){\n                return 1;\n            }else if(ran <= 0.5){\n                return 2;\n            }else if(ran <= 0.8){\n                return 3;\n            }else{\n                return 4;\n            }\n        }\n        case 7:{\n            // return 4;\n            if(ran <= 0.1){\n                return 1;\n            }else if(ran <= 0.4){\n                return 2;\n            }else if(ran <= 0.7){\n                return 3;\n            }else{\n                return 4;\n            }\n        }\n        case 8:{\n            return 5;\n            // if(ran <= 0.3){\n            //     return 2;\n            // }else if(ran <= 0.6){\n            //     return 3;\n            // }else if(ran <= 0.9){\n            //     return 4;\n            // }else{\n            //     return 5;\n            // }\n        }\n    }\n}\n\npublic static listIsFly = [false , true, false, true];\n}\n","import GameController from \"./GameController\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class ManagerUi extends cc.Component {\n\n    @property(GameController)\n    gemcontroller: GameController = null;\n\n    @property(cc.Node)\n    nodeFormulaCombine: cc.Node = null;\n\n    isLoadFormulaCombine: boolean = false;\n\n    loadFormulaCombine(){\n        let data = this.gemcontroller.formulaCombineGem;\n        let content = this.nodeFormulaCombine.getComponent(cc.ScrollView).content;\n        let item = content.getChildByName(\"item\");\n        \n        let string = data[0].Name + \" = \";\n        for(let a = 0; a < data[0].List.length;a++){\n            string += data[0].List[a][0] + \" \" + data[0].List[a][1];\n            if(a + 1 != data[0].List.length){\n                string += \" + \";\n            }\n        }\n        item.getChildByName(\"label\").getComponent(cc.Label).string = string;\n        \n        for(let i = 1;i < data.length;i++){\n            let instan = cc.instantiate(item);\n            instan.setPosition(cc.v2(0,0));\n\n            content.addChild(instan);\n\n            let stringInstan = data[i].Name + \" = \";\n            stringInstan = data[i].Name + \" = \";\n            for(let a = 0; a < data[i].List.length;a++){\n                stringInstan += data[i].List[a][0] + \" \" + data[i].List[a][1];\n                if(a + 1 != data[i].List.length){\n                    stringInstan += \" + \";\n                }\n            }\n            instan.getChildByName(\"label\").getComponent(cc.Label).string = stringInstan;\n        }\n        this.isLoadFormulaCombine = true;\n    }\n}\n","import Tile from \"./Tile\";\nimport ATile from \"./ATile\";\nimport GameController from \"./GameController\";\n\nconst {ccclass, property} = cc._decorator;\n// var AStarStep = require('Tile');\n@ccclass\nexport default class MapController extends cc.Component {\n    \n    // @property(cc.Vec2)\n    posTouchEnd: cc.Vec2 = null;\n\n    paths = [];\n    open = [];\n    closed = [];\n    newATile : ATile = null;\n    gameController: GameController = null;\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        // this.addTouch();\n        // this.tile = this.getComponent(Tile);\n    }\n\n\n    tilePosistion(pixelPosition) {\n        let mapSize = this.node.getContentSize();\n        let tileSizeWidth = this.gameController.tileSize;\n        let tileSizeHeight = this.gameController.tileSize;\n        \n        let x = Math.floor(pixelPosition.x / tileSizeWidth);\n        let y = Math.floor((mapSize.height - pixelPosition.y) / tileSizeHeight);\n        return cc.p(x, y);\n    }\n\n    pixelPosition(tilePosistion){\n        let mapSize = this.node.getContentSize();\n\n        let tileSizeWidth = this.gameController.tileSize;\n        let tileSizeHeight = this.gameController.tileSize;\n        let x = (tileSizeWidth * tilePosistion.x) + (tileSizeWidth / 2);\n        let y = (mapSize.height - (tileSizeHeight * tilePosistion.y)) - (tileSizeWidth / 2);\n        return cc.p(x, y);\n    }\n\n    // move(start, finish){\n    //     this.paths = this.moveToward(start, finish);\n    //     if (this.paths.length < 1) {\n    //         cc.log('cannot find path');\n    //         return;\n    //     }\n\n    //     // let sequence = [];\n    //     // let tileSize = 16;\n    //     // for (let i = 0; i < this.paths.length; ++i) {\n    //     //     let actionPosition = this.pixelPosition(this.paths[i]);\n    //     //     sequence.push(cc.moveTo(0.05, actionPosition));\n    //     // }\n    //     // this.player.runAction(cc.sequence(sequence));\n    //  }\n\n    indexOfStepArray(value, stepArray) {\n        for (let i = 0; i < stepArray.length; ++i) {\n            if (value.equals(stepArray[i].position)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    insertToOpen(step) {\n        step.getF();\n\n        let stepF = step.f;\n        let length = this.open.length;\n        let i = 0;\n        for (; i < length; ++i) {\n            if (stepF <= this.open[i].f) {\n                break;\n            }\n        }\n        // insert to index i\n        this.open.splice(i, 0, step);\n    }\n\n    moveToward(start, finish,isFly){\n        this.closed = [];\n        this.open = [];\n        let paths = [];\n\n        let newATile = new ATile(start);\n        // newATile.get();\n\n        this.open.push(newATile);\n\n        let pathFound = false;\n        do {\n            let currentStep = this.open.shift();\n            if(currentStep.x < 0 || currentStep.y < 0)\n            cc.log('currentStep: ' + currentStep);\n            \n            this.closed.push(currentStep);\n            \n            if (currentStep.position.equals(finish)) {\n                // cc.log('finish :P');\n                pathFound = true;\n                let tmpStep = currentStep;\n                do {\n                    // console.log(\"tmpStep.position \"+tmpStep.position);\n                    paths.unshift(tmpStep.position);\n                    tmpStep = tmpStep.last;\n                } while (tmpStep !== null);\n                \n                this.open = [];\n                this.closed = [];\n                break;\n            }\n\n            let borderPositions = this.borderMovablePoints(currentStep.position,isFly);\n\n            for (let i = 0; i < borderPositions.length; ++i) {\n                let borderPosition = borderPositions[i];\n                // cc.log('check: ' + borderPosition);\n                // Check if the step isn't already in the closed set\n                if (this.indexOfStepArray(borderPosition, this.closed) != -1) {\n                    // cc.log('had in closed: ' + borderPosition);\n                    // cc.log('remove check position: ' + borderPosition);\n                    borderPositions.splice(i, 1);\n                    i--;\n                    continue;\n                }\n                \n                let step = new ATile(borderPosition);\n                let moveCost = 1;\n                let index = this.indexOfStepArray(borderPosition, this.open);\n                \n                if (index == -1) {\n                    step.last = currentStep;\n                    step.g = currentStep.g + moveCost;\n                    // console.log(\"step.f \" + step.f);\n                    let distancePoint = borderPosition.sub(finish);\n                    step.h = Math.abs(distancePoint.x) + Math.abs(distancePoint.y);\n                    this.insertToOpen(step);\n                } else {\n                    // cc.log('had in open: ' + step.toString());\n                    step = this.open[index];\n                    if (currentStep.g + moveCost < step.g) {\n                        // cc.log('re insert into open: ' + step.toString());\n                        step.g = currentStep.g + moveCost;\n                        \n                        // re insert\n                        this.open.splice(index, 1);\n                        this.insertToOpen(step);\n                    }\n                }\n            }\n\n        } while (this.open.length > 0);\n\n        return paths;\n    }\n\n    // costToMove(positionLeft, positionRight) {\n    //     return 1;\n    // }\n\n    borderMovablePoints (position,isFly) {\n        let results = [];\n        let hasTop = false;\n        let hasBottom = false;\n        let hasLeft = false;\n        let hasRight = false;\n        \n        // top\n        let top = cc.p(position.x, position.y - 1);\n        let tiles = this.gameController.tiles;\n\n        let index;\n        index = top.y * this.gameController.row + top.x;\n        \n        if ((top.y >= 0 && tiles[index] && top.y <= this.gameController.col - 1)) {\n            // cc.log('top: ' + top);\n            if(isFly){\n                results.push(top);\n                hasTop = true;                \n            }else if(tiles[index].hasGem == false && tiles[index].hasStone == false){\n                results.push(top);\n                hasTop = true;\n            }\n        }\n        // bottom\n        let bottom = cc.p(position.x, position.y + 1);\n        index = bottom.y * this.gameController.row + bottom.x;\n        if ((bottom.y >= 0 && tiles[index] && bottom.y <= this.gameController.col - 1)) {\n            // cc.log('bottom: ' + bottom);\n            // results.push(bottom);\n            // hasBottom = true;\n            if(isFly){\n                results.push(bottom);\n                hasBottom = true;             \n            }else if(tiles[index] && tiles[index].hasGem == false && tiles[index].hasStone == false){\n                results.push(bottom);\n                hasBottom = true;\n            }\n        }\n        // left\n        let left = cc.p(position.x - 1, position.y);\n\n        index = left.y * this.gameController.row + left.x;\n        if ((((left.x >= 0 && tiles[index] && left.x <= this.gameController.row - 1)))) {\n            // cc.log('left: ' + left);\n            // results.push(left);\n            // hasLeft = true;\n            if(isFly){\n                results.push(left);\n                hasLeft = true;     \n            }else if(tiles[index] && tiles[index].hasGem == false && tiles[index].hasStone == false ){\n                results.push(left);\n                hasLeft = true;\n            }\n        }\n\n        // right\n        let right = cc.p(position.x + 1, position.y);\n        index = right.y * this.gameController.row + right.x;\n        if ((right.x >= 0 && tiles[index] && right.x <= this.gameController.row - 1)) {\n            // cc.log('right: ' + right);\n            // results.push(right);\n            // hasRight = true;\n            if(isFly){\n                results.push(right);\n                hasRight = true; \n            }else if( tiles[index] && tiles[index].hasGem == false && tiles[index].hasStone == false){\n                results.push(right);\n                hasRight = true;\n            }\n        }        \n        return results;\n    }\n\n    // update (dt) {}\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class SlateAirSlate extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n    listEnemyGround = [];\n    listEnemyAir = [];\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataSlate.length;i++){\n            if(this.gameController.dataSlate[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataSlate[indexx].Level;\n        this.listArmorObj = this.gameController.dataSlate[indexx].arrmor;\n    }\n\n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n\n        this.checkBothEnemyAround();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.targetEnemy && this.targetEnemy.name != \"\" && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    let range;\n                    if(this.gameController.isFlyEnemyNextWay){\n                        range = (4 * this.gameController.tileSize * 2) + this.node.height / 2;\n                    }else{\n                        range = (1 * this.gameController.tileSize * 2) + this.node.height / 2;\n                    }                    \n                    if(newDis > range){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }                    \n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n                \n    \n                let cdskill = cc.callFunc(function() {\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.isCdShoot = true;                     \n                    }\n                }, this);\n                this.node.runAction(cc.sequence(act2,cc.delayTime(this.timeCd),cdskill));\n            }\n        \n    }\n\n    checkBothEnemyAround(){\n        this.listEnemey = [];\n        if(this.gameController.enemys.length <= 0) return;\n        let range;\n        if(this.gameController.isFlyEnemyNextWay){\n            range = (4 * this.gameController.tileSize * 2) + this.node.height / 2;\n        }else{\n            range = (1 * this.gameController.tileSize * 2) + this.node.height / 2;\n        }\n\n        for(let enemy of this.gameController.enemys){\n            let newDis = cc.pDistance(enemy.getPosition(),this.node.getPosition());\n            if(newDis <= range && !enemy.getComponent(Enemy).isDie){\n                this.listEnemey.push(enemy);\n            }\n        }\n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Enemy from \"./Enemy\";\nimport Bullet from \"./Bullet\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class SlateAncientSlate extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n    isCdDmgSkill: boolean = true;\n    isCdHoldSkill: boolean = true;\n    listSlateAround = [];\n    \n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataSlate.length;i++){\n            if(this.gameController.dataSlate[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataSlate[indexx].Level;\n        this.listArmorObj = this.gameController.dataSlate[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n        \n        if(!this.isbuff){\n            let range = (3 * this.gameController.tileSize * 2) + this.node.height / 2;\n            this.checkSlateAround(range);\n            if(this.listSlateAround.length > 0){\n                this.buffSlateAround(10);\n            }\n            this.isbuff = true;\n        }\n\n        this.checkEnemyAround();\n        this.dmgSkill();\n\n        if(this.targetEnemy){\n            let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n            if(newDis > this.range()){\n                this.targetEnemy = null;\n                this.detectNearestEnemy();\n            } \n        }\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        this.holdEnemy();\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }\n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdShoot = true;\n                }, this);\n    \n                this.node.runAction(cc.sequence(act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n    dmgSkill(){\n        if(this.listEnemey.length > 0  && this.isCdDmgSkill){\n            this.isCdDmgSkill = false;\n            for(let a of this.listEnemey){\n                let rand = Math.floor(Math.random() * (120 - 5 + 1)) + 5;\n\n                let dmg = Math.round((this.numSelfKill * rand) + (this.gameController.levelPlayer * 50));\n                let dmgArmor = dmg * this.armorDmg;\n                let incr = Math.round(dmg * this.incrDMG / 100);\n                let totalDMG = Math.round((dmg + incr + dmgArmor));\n                a.getComponent(Enemy).takeDame(totalDMG,this.index);\n            }\n    \n            let act1 = cc.callFunc(function () {\n                this.isCdDmgSkill = true;\n           }, this);\n    \n            this.node.runAction(cc.sequence(cc.delayTime(1),act1));\n        }\n    }\n\n    buffSlateAround(Dmg){\n        for(let a of this.listSlateAround){\n            let c = Dmg;\n            if(a.getComponent(Gem).incrDMG < c)\n            a.getComponent(Gem).incrDMG = c;\n        }\n    }\n\n    checkSlateAround(range){\n        if(this.gameController.slates.length <= 0) return;\n        this.listSlateAround = [];\n        for(let a of this.gameController.slates){\n            let newDis = cc.pDistance(a.getPosition(),this.node.getPosition());\n            let b = range;\n            if(newDis <= b){\n                if(a.getComponent(Gem).pos.x == this.pos.x && \n                a.getComponent(Gem).pos.y == this.pos.y) continue;\n\n                this.listSlateAround.push(a);\n            }\n        }\n    }\n\n    holdEnemy(){\n        if(this.targetEnemy && this.isCdHoldSkill){\n            this.isCdHoldSkill = false;\n            this.targetEnemy.getComponent(Enemy).stun(2.5);\n\n            let act1 = cc.callFunc(function () {\n                this.isCdHoldSkill = true;\n           }, this);\n    \n            this.node.runAction(cc.sequence(cc.delayTime(3),act1));            \n        }\n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).indexGemCreateBullet = this.index;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    } \n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class SlateDamageSlate extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n    isCdDmgSkill: boolean = true;\n    listSlateAround = [];\n    \n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataSlate.length;i++){\n            if(this.gameController.dataSlate[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataSlate[indexx].Level;\n        this.listArmorObj = this.gameController.dataSlate[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n        \n        if(!this.isbuff){\n            let range = (3 * this.gameController.tileSize * 2) + this.node.height / 2;\n            this.checkSlateAround(range);\n            if(this.listSlateAround.length > 0){\n                this.buffSlateAround(10);\n            }\n            this.isbuff = true;\n        }\n\n        this.checkEnemyAround();\n        this.dmgSkill();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }\n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdShoot = true;\n                }, this);\n    \n                this.node.runAction(cc.sequence(act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n    dmgSkill(){\n        if(this.listEnemey.length > 0  && this.isCdDmgSkill){\n            this.isCdDmgSkill = false;\n            \n            for(let a of this.listEnemey){\n                let dmg = Math.round((this.numSelfKill * 10) + (this.gameController.levelPlayer * 20));\n                let dmgArmor = dmg * this.armorDmg;\n                let incr = Math.round(dmg * this.incrDMG / 100);\n                let totalDMG = Math.round((dmg + incr + dmgArmor));\n                a.getComponent(Enemy).takeDame(totalDMG,this.index);\n            }\n    \n            let act1 = cc.callFunc(function () {\n                this.isCdDmgSkill = true;\n           }, this);\n    \n            this.node.runAction(cc.sequence(cc.delayTime(1),act1));\n        }\n    }\n\n    buffSlateAround(Dmg){\n        for(let a of this.listSlateAround){\n            let c = Dmg;\n            if(a.getComponent(Gem).incrDMG < c)\n            a.getComponent(Gem).incrDMG = c;\n        }\n    }\n\n    checkSlateAround(range){\n        if(this.gameController.slates.length <= 0) return;\n        this.listSlateAround = [];\n        for(let a of this.gameController.slates){\n            let newDis = cc.pDistance(a.getPosition(),this.node.getPosition());\n            let b = range;\n            if(newDis <= b){\n                if(a.getComponent(Gem).pos.x == this.pos.x && \n                a.getComponent(Gem).pos.y == this.pos.y) continue;\n\n                this.listSlateAround.push(a);\n            }\n        }\n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).indexGemCreateBullet = this.index;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class SlateElderSlate extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n    isCdDmgSkill: boolean = true;\n    \n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataSlate.length;i++){\n            if(this.gameController.dataSlate[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataSlate[indexx].Level;\n        this.listArmorObj = this.gameController.dataSlate[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;        \n\n        this.checkEnemyAround();\n\n        if(this.targetEnemy){\n            let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n            if(newDis > this.range()){\n                this.targetEnemy = null;\n                this.detectNearestEnemy();\n            } \n        }\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        this.dmgSkill();\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }\n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdShoot = true;\n                }, this);\n    \n                this.node.runAction(cc.sequence(act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n    chance(per){\n        let max =  1 / (per / 100);\n        let min = 1;\n        let ran = Math.floor(Math.random() * (max - min + 1)) + min;\n        \n        if(ran == 1){\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n    dmgSkill(){\n        if(this.listEnemey.length > 0  && this.isCdDmgSkill){\n            this.isCdDmgSkill = false;\n            if(this.chance(5)){\n                this.FrostNova();\n            }\n\n            if(this.chance(5)){\n                this.ThunderClap();\n            }\n\n            if(this.chance(5)){\n                this.FanOfKnives();\n            }\n\n            if(this.chance(5)){\n                this.ShowWave();\n            }\n\n            if(this.chance(5)){\n                this.GoldShoot();\n            }\n\n            if(this.chance(5)){\n                this.ForkedLightning();\n            }\n\n            if(this.chance(100)){\n                this.Posion();\n            }\n\n            let act1 = cc.callFunc(function () {\n                this.isCdDmgSkill = true;\n           }, this);\n    \n            this.node.runAction(cc.sequence(cc.delayTime(1),act1));\n        }\n    }\n\n    FrostNova(){\n        for(let a of this.listEnemey){\n            let dmg = 300;\n            let dmgArmor = dmg * this.armorDmg;\n            let incr = Math.round(dmg * this.incrDMG / 100);\n            let totalDMG = Math.round((dmg + incr + dmgArmor));\n            a.getComponent(Enemy).takeDame(totalDMG,-1);\n        }\n    }\n\n    ThunderClap(){\n        for(let a of this.listEnemey){\n            let dmg = 150;\n            let dmgArmor = dmg * this.armorDmg;\n            let incr = Math.round(dmg * this.incrDMG / 100);\n            let totalDMG = Math.round((dmg + incr + dmgArmor));\n            a.getComponent(Enemy).takeDame(totalDMG,-1);\n        }\n    }\n\n    FanOfKnives(){\n        for(let a of this.listEnemey){\n            let dmg = 150;\n            let dmgArmor = dmg * this.armorDmg;\n            let incr = Math.round(dmg * this.incrDMG / 100);\n            let totalDMG = Math.round((dmg + incr + dmgArmor));\n            a.getComponent(Enemy).takeDame(totalDMG,-1);\n        }\n    }\n\n    ShowWave(){\n        for(let a of this.listEnemey){\n            let dmg = 200;\n            let dmgArmor = dmg * this.armorDmg;\n            let incr = Math.round(dmg * this.incrDMG / 100);\n            let totalDMG = Math.round((dmg + incr + dmgArmor));\n            a.getComponent(Enemy).takeDame(totalDMG,-1);\n        }\n    }\n\n    GoldShoot(){\n        for(let a of this.listEnemey){\n            let dmg = this.gameController.gold;\n            let dmgArmor = dmg * this.armorDmg;\n            let incr = Math.round(dmg * this.incrDMG / 100);\n            let totalDMG = Math.round((dmg + incr + dmgArmor));\n            a.getComponent(Enemy).takeDame(totalDMG,-1);\n        }\n    }\n\n    ForkedLightning(){\n        for(let a of this.listEnemey){\n            let dmg = 200;\n            let dmgArmor = dmg * this.armorDmg;\n            let incr = Math.round(dmg * this.incrDMG / 100);\n            let totalDMG = Math.round((dmg + incr + dmgArmor));\n            a.getComponent(Enemy).takeDame(totalDMG,-1);\n        }\n    }\n\n    Posion(){\n        for(let a of this.listEnemey){\n            let dmg = 40;\n            let dmgArmor = dmg * this.armorDmg;\n            let incr = Math.round(dmg * this.incrDMG / 100);\n            let totalDMG = Math.round((dmg + incr + dmgArmor));\n            a.getComponent(Enemy).activePosion(dmg,2)\n        }\n    }\n    \n    \n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).indexGemCreateBullet = this.index;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class SlateHoldSlate extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n    isCdDmgSkill: boolean = true;\n    isCdHoldSkill: boolean = true;\n    listSlateAround = [];\n    \n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataSlate.length;i++){\n            if(this.gameController.dataSlate[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataSlate[indexx].Level;\n        this.listArmorObj = this.gameController.dataSlate[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n        \n        if(!this.isbuff){\n            let range = (3 * this.gameController.tileSize * 2) + this.node.height / 2;\n            this.checkSlateAround(range);\n            if(this.listSlateAround.length > 0){\n                this.buffSlateAround(10);\n            }\n            this.isbuff = true;\n        }\n\n        this.checkEnemyAround();\n        this.dmgSkill();\n\n        if(this.targetEnemy){\n            let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n            if(newDis > this.range()){\n                this.targetEnemy = null;\n                this.detectNearestEnemy();\n            } \n        }\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        this.holdEnemy();\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }\n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdShoot = true;\n                }, this);\n    \n                this.node.runAction(cc.sequence(act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n    dmgSkill(){\n        if(this.listEnemey.length > 0  && this.isCdDmgSkill){\n            this.isCdDmgSkill = false;\n            for(let a of this.listEnemey){\n                let dmg = Math.round((this.numSelfKill * 20) + 60);\n                let dmgArmor = dmg * this.armorDmg;\n                let incr = Math.round(dmg * this.incrDMG / 100);\n                let totalDMG = Math.round((dmg + incr + dmgArmor));\n                a.getComponent(Enemy).takeDame(totalDMG,this.index);\n            }\n    \n            let act1 = cc.callFunc(function () {\n                this.isCdDmgSkill = true;\n           }, this);\n    \n            this.node.runAction(cc.sequence(cc.delayTime(1),act1));\n        }\n    }\n\n    buffSlateAround(Dmg){\n        for(let a of this.listSlateAround){\n            let c = Dmg;\n            if(a.getComponent(Gem).incrDMG < c)\n            a.getComponent(Gem).incrDMG = c;\n        }\n    }\n\n    checkSlateAround(range){\n        if(this.gameController.slates.length <= 0) return;\n        this.listSlateAround = [];\n        for(let a of this.gameController.slates){\n            let newDis = cc.pDistance(a.getPosition(),this.node.getPosition());\n            let b = range;\n            if(newDis <= b){\n                if(a.getComponent(Gem).pos.x == this.pos.x && \n                a.getComponent(Gem).pos.y == this.pos.y) continue;\n\n                this.listSlateAround.push(a);\n            }\n        }\n    }\n\n    holdEnemy(){\n        if(this.targetEnemy && this.isCdHoldSkill){\n            this.isCdHoldSkill = false;\n            this.targetEnemy.getComponent(Enemy).stun(1.5);\n\n            let act1 = cc.callFunc(function () {\n                this.isCdHoldSkill = true;\n           }, this);\n    \n            this.node.runAction(cc.sequence(cc.delayTime(2),act1));            \n        }\n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).indexGemCreateBullet = this.index;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class SlateOpalVeinSlate extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n    listEnemey4Tile = [];\n    listEnemey5Tile = [];\n    isCd4Tile: boolean = true;\n    isCd5Tile: boolean = true;\n    listSlateAndGemAround = [];\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataSlate.length;i++){\n            if(this.gameController.dataSlate[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataSlate[indexx].Level;\n        this.listArmorObj = this.gameController.dataSlate[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n        \n        if(!this.isbuff){\n            this.isbuff = true;\n            let act = cc.callFunc(function() {\n                let range = (4 * this.gameController.tileSize * 2) + this.node.height / 2;\n                this.checkGemAndSlateAround(range);\n                if(this.listSlateAndGemAround.length > 0){\n                    this.buffGemsAround(10);\n                }\n            }, this);\n            \n            this.node.runAction(cc.sequence(cc.delayTime(0.3),act));\n        }\n\n        this.checkEnemyAround();\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.isCdShoot){\n            this.isCdShoot = false;\n            let tempTime = this.cdActiveSkill();\n            this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n            if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n            let act2 = cc.callFunc(function() {\n                \n                if(this.listEnemey.length > 0){\n                    this.shoot();\n                }\n            }, this);\n\n            let cdskill = cc.callFunc(function() {\n                this.isCdShoot = true;     \n            }, this);\n\n            this.node.runAction(cc.sequence(act2,cc.delayTime(this.timeCd),cdskill));\n        }\n    }\n\n\n    buffGemsAround(SDP){\n        for(let a of this.listSlateAndGemAround){\n            let c;\n            if(a.getComponent(Gem).BuffByOpal > 0){\n                c = SDP + a.getComponent(Gem).BuffByOpal;\n            }else{\n                c = SDP;\n            }\n\n            if(a.getComponent(Gem).incrSDP < c)\n                a.getComponent(Gem).incrSDP = c;\n            \n        }\n    }\n\n    checkGemAndSlateAround(range){\n        if(this.gameController.slates.length <= 0) return;\n        this.listSlateAndGemAround = [];\n        for(let a of this.gameController.slates){\n            let newDis = cc.pDistance(a.getPosition(),this.node.getPosition());\n            let b = range;\n            if(newDis <= b){\n                if(a.getComponent(Gem).pos.x == this.pos.x && \n                a.getComponent(Gem).pos.y == this.pos.y) continue;\n\n                this.listSlateAndGemAround.push(a);\n            }\n        }\n\n        for(let a of this.gameController.gems){\n            let newDis = cc.pDistance(a.getPosition(),this.node.getPosition());\n            let b = range;\n            if(newDis <= b){\n                if(a.getComponent(Gem).pos.x == this.pos.x && \n                a.getComponent(Gem).pos.y == this.pos.y) continue;\n\n                this.listSlateAndGemAround.push(a);\n            }\n        }\n    }\n   \n\n    shoot(){\n        if(!this.listEnemey) return;\n\n        if(this.currentLevel != this.listLevelObj.length){\n            let numRemove = this.listEnemey.length - 3;\n            for(let i = 0;i < numRemove;i++){\n                for(let j = 0;j < this.listEnemey.length;j++){\n                    if(this.listEnemey[j].getComponent(Enemy).index == this.listEnemey.length){\n                        this.listEnemey.splice(j,1);\n                        break;\n                    }\n                }\n            }\n        }\n        \n        for(let e of this.listEnemey){\n            //create Bullet\n            let bullet = cc.instantiate(this.bulletPrefab);\n            bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n            bullet.getComponent(Bullet).target = e;\n            bullet.getComponent(Bullet).damage = this.damage();\n            bullet.getComponent(Bullet).indexTarget = e.getComponent(Enemy).index;\n            this.gameController.mapController.node.addChild(bullet);\n        }\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class SlatePoisonSlate extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n    isCdDmgSkill: boolean = true;\n    \n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataSlate.length;i++){\n            if(this.gameController.dataSlate[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataSlate[indexx].Level;\n        this.listArmorObj = this.gameController.dataSlate[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n        \n\n        this.checkEnemyAround();\n        this.dmgSkill();\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }\n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdShoot = true;\n                }, this);\n    \n                this.node.runAction(cc.sequence(act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n    dmgSkill(){\n        if(this.listEnemey.length > 0  && this.isCdDmgSkill){\n            this.isCdDmgSkill = false;\n        \n            for(let a of this.listEnemey){\n                a.getComponent(Enemy).activePosion(this.damagePosion(),this.timeActive());\n            }\n    \n            let act1 = cc.callFunc(function () {\n                this.isCdDmgSkill = true;\n           }, this);\n    \n            this.node.runAction(cc.sequence(cc.delayTime(0.5),act1));\n        }\n    }\n\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).indexGemCreateBullet = this.index;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Enemy from \"./Enemy\";\nimport Bullet from \"./Bullet\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class SlateRangeSlate extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataSlate.length;i++){\n            if(this.gameController.dataSlate[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataSlate[indexx].Level;\n        this.listArmorObj = this.gameController.dataSlate[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n        \n        this.checkEnemyAround();\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n    \n                let act2 = cc.callFunc(function() {\n                    \n                    if(this.listEnemey.length > 0){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdShoot = true;     \n                }, this);\n    \n                this.node.runAction(cc.sequence(act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n   \n\n    shoot(){\n        if(!this.listEnemey) return;\n\n        if(this.currentLevel != this.listLevelObj.length){\n            let numRemove = this.listEnemey.length - 3;\n            for(let i = 0;i < numRemove;i++){\n                for(let j = 0;j < this.listEnemey.length;j++){\n                    if(this.listEnemey[j].getComponent(Enemy).index == this.listEnemey.length){\n                        this.listEnemey.splice(j,1);\n                        break;\n                    }\n                }\n            }\n        }\n        \n        for(let e of this.listEnemey){\n            //create Bullet\n            let bullet = cc.instantiate(this.bulletPrefab);\n            bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n            bullet.getComponent(Bullet).target = e;\n            bullet.getComponent(Bullet).damage = this.damage();\n            bullet.getComponent(Bullet).indexTarget = e.getComponent(Enemy).index;\n            this.gameController.mapController.node.addChild(bullet);\n        }\n    }\n}\n","import Gem from \"./Gem\";\nimport Enemy from \"./Enemy\";\nimport Bullet from \"./Bullet\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class SlateSlowSlate extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataSlate.length;i++){\n            if(this.gameController.dataSlate[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataSlate[indexx].Level;\n        this.listArmorObj = this.gameController.dataSlate[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n        \n        this.checkEnemyAround();\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n    \n                let act2 = cc.callFunc(function() {\n                    \n                    if(this.listEnemey.length > 0){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdShoot = true;     \n                }, this);\n    \n                this.node.runAction(cc.sequence(act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n    shoot(){\n        if(!this.listEnemey) return;\n        \n        for(let e of this.listEnemey){\n            //create Bullet\n            let bullet = cc.instantiate(this.bulletPrefab);\n            bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n            bullet.getComponent(Bullet).target = e;\n            bullet.getComponent(Bullet).damage = this.damage();\n            bullet.getComponent(Bullet).indexTarget = e.getComponent(Enemy).index;\n            bullet.getComponent(Bullet).slow = 15;\n            bullet.getComponent(Bullet).timeActive = -1;\n            this.gameController.mapController.node.addChild(bullet);\n        }\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class SlateSpellSlate extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n    isCdDmgSkill: boolean = true;\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataSlate.length;i++){\n            if(this.gameController.dataSlate[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataSlate[indexx].Level;\n        this.listArmorObj = this.gameController.dataSlate[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;        \n\n        this.checkEnemyAround();\n\n        if(this.targetEnemy){\n            let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n            if(newDis > this.range()){\n                this.targetEnemy = null;\n                this.detectNearestEnemy();\n            } \n        }\n\n        if((!this.targetEnemy || this.targetEnemy.name == \"\" || this.targetEnemy.getComponent(Enemy).isDie) && this.listEnemey.length > 0){\n            this.detectNearestEnemy();\n        }\n\n        this.dmgSkill();\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.isCdShoot){\n                this.isCdShoot = false;\n                let tempTime = this.cdActiveSkill();\n                this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n                if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n    \n                let act2 = cc.callFunc(function() {\n                    let newDis = cc.pDistance(this.targetEnemy.getPosition(),this.node.getPosition());\n                    if(newDis > this.range()){\n                        this.targetEnemy = null;\n                        this.detectNearestEnemy();\n                    }\n\n                    if(this.targetEnemy && this.targetEnemy.name != \"\"){\n                        this.shoot();\n                    }\n                }, this);\n    \n                let cdskill = cc.callFunc(function() {\n                    this.isCdShoot = true;\n                }, this);\n    \n                this.node.runAction(cc.sequence(act2,cc.delayTime(this.timeCd),cdskill));\n            }\n    }\n\n    chance(per){\n        let max =  1 / (per / 100);\n        let min = 1;\n        let ran = Math.floor(Math.random() * (max - min + 1)) + min;\n        \n        if(ran == 1){\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n    dmgSkill(){\n        if(this.listEnemey.length > 0  && this.isCdDmgSkill){\n            this.isCdDmgSkill = false;\n            if(this.chance(5)){\n                this.FrostNova();\n            }\n\n            if(this.chance(5)){\n                this.FanOfKnives();\n            }\n\n            if(this.chance(5)){\n                this.Lightning();\n            }\n\n            if(this.chance(5)){\n                this.CarrionSwarm();\n            }\n\n            if(this.chance(5)){\n                this.TakeGold();\n            }\n\n            let act1 = cc.callFunc(function () {\n                this.isCdDmgSkill = true;\n           }, this);\n    \n            this.node.runAction(cc.sequence(cc.delayTime(1),act1));\n        }\n    }\n\n    FrostNova(){\n        for(let a of this.listEnemey){\n            let dmg = 100;\n            let dmgArmor = dmg * this.armorDmg;\n            let incr = Math.round(dmg * this.incrDMG / 100);\n            let totalDMG = Math.round((dmg + incr + dmgArmor));\n            a.getComponent(Enemy).takeDame(totalDMG,-1);\n        }\n    }\n\n    FanOfKnives(){\n        for(let a of this.listEnemey){\n            let dmg = 80;\n            let dmgArmor = dmg * this.armorDmg;\n            let incr = Math.round(dmg * this.incrDMG / 100);\n            let totalDMG = Math.round((dmg + incr + dmgArmor));\n            a.getComponent(Enemy).takeDame(totalDMG,-1);\n        }\n    }\n    \n    Lightning(){\n        for(let a of this.listEnemey){\n            let dmg = 85;\n            let dmgArmor = dmg * this.armorDmg;\n            let incr = Math.round(dmg * this.incrDMG / 100);\n            let totalDMG = Math.round((dmg + incr + dmgArmor));\n            a.getComponent(Enemy).takeDame(totalDMG,-1);\n        }\n    }\n\n    CarrionSwarm(){\n        for(let a of this.listEnemey){\n            let dmg = 125;\n            let dmgArmor = dmg * this.armorDmg;\n            let incr = Math.round(dmg * this.incrDMG / 100);\n            let totalDMG = Math.round((dmg + incr + dmgArmor));\n            a.getComponent(Enemy).takeDame(totalDMG,-1);\n        }\n    }\n\n    TakeGold(){\n        this.gameController.gold += 3;\n        this.gameController.updateUi();\n    }\n\n    shoot(){\n        if(!this.targetEnemy) return;\n        //create Bullet\n        let bullet = cc.instantiate(this.bulletPrefab);\n        bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n        bullet.getComponent(Bullet).target = this.targetEnemy;\n        bullet.getComponent(Bullet).indexGemCreateBullet = this.index;\n        bullet.getComponent(Bullet).damage = this.damage();\n        bullet.getComponent(Bullet).indexTarget = this.targetEnemy.getComponent(Enemy).index;\n        this.gameController.mapController.node.addChild(bullet);\n    }\n}\n","import Gem from \"./Gem\";\nimport Bullet from \"./Bullet\";\nimport Enemy from \"./Enemy\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class SlateViperSlate extends Gem {\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    turret: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    img: cc.SpriteFrame = null;\n    \n    nearestEnemy: cc.Node = null;\n    targetEnemy: cc.Node = null;\n    listEnemey4Tile = [];\n    listEnemey5Tile = [];\n    isCd4Tile: boolean = true;\n    isCd5Tile: boolean = true;\n    listSlateAndGemAround = [];\n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.icon = this.img;\n\n        let indexx = 0;\n        for(let i = 0; i < this.gameController.dataSlate.length;i++){\n            if(this.gameController.dataSlate[i].Name.toString().toLocaleLowerCase() === this.node.name.toString().toLocaleLowerCase()){\n                indexx = i;\n                break;\n            }\n        }\n\n        this.listLevelObj = this.gameController.dataSlate[indexx].Level;\n        this.listArmorObj = this.gameController.dataSlate[indexx].arrmor;\n    }\n    \n    update(){\n        if(!this.gameController.isActiveWay) return;\n        if(!this.isCanAttack()) return;\n        \n        if(!this.isbuff){\n            let range = (4 * this.gameController.tileSize * 2) + this.node.height / 2;\n            this.checkGemAndSlateAround(range);\n            if(this.listSlateAndGemAround.length > 0){\n                this.buffGemsAround(10);\n            }\n            this.isbuff = true;\n        }\n\n        this.checkEnemyAround();\n        this.checkEnemyAround4And5Tile();\n\n        if(this.listEnemey4Tile.length > 0 || this.listEnemey5Tile.length > 0){\n            this.Dealing4And5Tile();\n        }\n\n        if(this.damage() > 0 && this.listEnemey.length > 0  && this.isCdShoot){\n            this.isCdShoot = false;\n            let tempTime = this.cdActiveSkill();\n            this.timeCd =  tempTime - ((tempTime * this.incrSDP) / 100);\n            if(this.timeCd < this.maxCd) this.timeCd = this.maxCd;\n\n            let act2 = cc.callFunc(function() {\n                \n                if(this.listEnemey.length > 0){\n                    this.shoot();\n                }\n            }, this);\n\n            let cdskill = cc.callFunc(function() {\n                this.isCdShoot = true;     \n            }, this);\n\n            this.node.runAction(cc.sequence(act2,cc.delayTime(this.timeCd),cdskill));\n        }\n    }\n\n    Dealing4And5Tile(){\n        if(this.listEnemey4Tile.length > 0  && this.isCd4Tile){\n            this.isCd4Tile = false;\n        \n            for(let a of this.listEnemey4Tile){\n                let dmg = 30;\n                let dmgArmor = dmg * this.armorDmg;\n                let incr = Math.round(dmg * this.incrDMG / 100);\n                let totalDMG = Math.round((dmg + incr + dmgArmor));\n                a.getComponent(Enemy).takeDame(totalDMG,-1);\n            }\n    \n            let act1 = cc.callFunc(function () {\n                this.isCd4Tile = true;\n           }, this);\n    \n            this.node.runAction(cc.sequence(cc.delayTime(0.5),act1));\n        }\n\n        if(this.listEnemey5Tile.length > 0  && this.isCd5Tile){\n            this.isCd5Tile = false;\n        \n            for(let a of this.listEnemey5Tile){\n                let dmg = 50;\n                let dmgArmor = dmg * this.armorDmg;\n                let incr = Math.round(dmg * this.incrDMG / 100);\n                let totalDMG = Math.round((dmg + incr + dmgArmor));\n                a.getComponent(Enemy).takeDame(dmg,-1);\n            }\n    \n            let act1 = cc.callFunc(function () {\n                this.isCd5Tile = true;\n           }, this);\n    \n            this.node.runAction(cc.sequence(cc.delayTime(1),act1));\n        }\n    }\n\n    buffGemsAround(Dmg){\n        for(let a of this.listSlateAndGemAround){\n            let c = Dmg;\n            if(a.getComponent(Gem).incrDMG < c)\n            a.getComponent(Gem).incrDMG = c;\n        }\n    }\n\n    checkGemAndSlateAround(range){\n        if(this.gameController.slates.length <= 0) return;\n        this.listSlateAndGemAround = [];\n        for(let a of this.gameController.slates){\n            let newDis = cc.pDistance(a.getPosition(),this.node.getPosition());\n            let b = range;\n            if(newDis <= b){\n                if(a.getComponent(Gem).pos.x == this.pos.x && \n                a.getComponent(Gem).pos.y == this.pos.y) continue;\n\n                this.listSlateAndGemAround.push(a);\n            }\n        }\n\n        for(let a of this.gameController.gems){\n            let newDis = cc.pDistance(a.getPosition(),this.node.getPosition());\n            let b = range;\n            if(newDis <= b){\n                if(a.getComponent(Gem).pos.x == this.pos.x && \n                a.getComponent(Gem).pos.y == this.pos.y) continue;\n\n                this.listSlateAndGemAround.push(a);\n            }\n        }\n    }\n\n    checkEnemyAround4And5Tile(){\n        this.listEnemey4Tile = [];\n        this.listEnemey5Tile = [];\n        if(this.gameController.enemys.length <= 0) return;\n        let range4Tile = (4 * this.gameController.tileSize * 2) + this.node.height / 2;\n        \n        for(let enemy of this.gameController.enemys){\n            let newDis = cc.pDistance(enemy.getPosition(),this.node.getPosition());\n            if(newDis <= range4Tile && !enemy.getComponent(Enemy).isDie){\n                this.listEnemey4Tile.push(enemy);\n            }\n        }\n\n        let range5Tile = (5 * this.gameController.tileSize * 2) + this.node.height / 2;\n        for(let enemy of this.gameController.enemys){\n            let newDis = cc.pDistance(enemy.getPosition(),this.node.getPosition());\n            if(newDis <= range4Tile && !enemy.getComponent(Enemy).isDie){\n                this.listEnemey5Tile.push(enemy);\n            }\n        }\n    }\n   \n\n    shoot(){\n        if(!this.listEnemey) return;\n\n        if(this.currentLevel != this.listLevelObj.length){\n            let numRemove = this.listEnemey.length - 3;\n            for(let i = 0;i < numRemove;i++){\n                for(let j = 0;j < this.listEnemey.length;j++){\n                    if(this.listEnemey[j].getComponent(Enemy).index == this.listEnemey.length){\n                        this.listEnemey.splice(j,1);\n                        break;\n                    }\n                }\n            }\n        }\n        \n        for(let e of this.listEnemey){\n            //create Bullet\n            let bullet = cc.instantiate(this.bulletPrefab);\n            bullet.setPosition(cc.pAdd(this.node.getPosition() , this.turret.getPosition()));\n            bullet.getComponent(Bullet).target = e;\n            bullet.getComponent(Bullet).damage = this.damage();\n            bullet.getComponent(Bullet).indexTarget = e.getComponent(Enemy).index;\n            this.gameController.mapController.node.addChild(bullet);\n        }\n    }\n}\n","import Enemy from \"./Enemy\";\nimport GameController from \"./GameController\";\nimport Bullet from \"./Bullet\";\n\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class SplashBullet extends Bullet {\n\n    // target: cc.Node = null;\n    // indexTarget: number = 0;\n    // damage = 1;\n    endPos: cc.Vec2 = null;\n    // direction: cc.Vec2 = null;\n    activeExp: boolean = false;\n    collider: cc.BoxCollider = null;\n    ani : cc.Animation = null;\n    splashTile = 1;\n    gameController: GameController = null;\n    \n\n    onLoad(){\n        this.ani = this.getComponent(cc.Animation);\n        this.endPos = this.target.getPosition();\n        let oldPos = this.node.getPosition();\n        let targetUpdate = this.target.getPosition();\n        this.direction = cc.pNormalize(cc.pSub(targetUpdate, oldPos));\n        this.collider = this.node.getComponent(cc.BoxCollider);\n        this.collider.enabled = false;\n    }\n\n    update(dt){\n        if(!this.target.name){\n            this.node.destroy();\n        }\n\n        let range;\n        if(this.nameExplosion === \"SilverExplosion\"){\n            range = cc.pDistance(this.node.getPosition(),this.target.getPosition());       \n        }else if(this.nameExplosion === \"RubyExplosion\"){\n            range = cc.pDistance(this.node.getPosition(),this.endPos);\n        }\n\n        if(this.target){\n            if(range > 10){\n                if(this.nameExplosion === \"SilverExplosion\"){\n                    this.bulletTarget();\n                }else if(this.nameExplosion === \"RubyExplosion\"){\n                    this.bulletTargetStay();\n                }\n            }else{\n                if(!this.activeExp){\n                    this.explosion();\n                }\n            }\n        }\n        \n    }\n\n    explosion(){\n        this.activeExp = true;\n        let size = this.splashTile * this.gameController.tileSize * 2;\n        this.node.setContentSize( size, size);\n        this.collider.size.width = size;\n        this.collider.size.height = size;\n        // console.log(this.collider.size.height);\n        this.collider.enabled = true;\n\n        this.node.runAction(cc.sequence(cc.delayTime(0.05), cc.callFunc(function () {\n            this.ani.play(this.nameExplosion);\n            this.collider.enabled = false;\n        }, this)));\n\n        this.node.runAction(cc.sequence(cc.delayTime(1.0), cc.callFunc(function () {\n            this.node.destroy();\n        }, this)));\n    }\n\n\n    \n\n    onCollisionEnter(other, self) {\n        this.checkColli(other, self);\n\n        if(other.tag != \"1\" || !this.activeExp) return;\n        if(other.node.getComponent(Enemy)){\n            if(!other.node.getComponent(Enemy).isDie \n            && other.node.getComponent(Enemy).index != this.indexTarget){\n                other.node.getComponent(Enemy).takeDame(this.damage,this.indexGemCreateBullet);\n            }\n        }\n    }\n}\n","import GameController from \"./GameController\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Stone extends cc.Component {\n    pos: cc.Vec2 = null;\n    posSquare = [];\n    gameController : GameController = null;\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        // this.addTouch();\n    }\n\n    addTouch(){\n        let self = this;\n        self.node.on(cc.Node.EventType.TOUCH_START, function (event) {\n        if(self.gameController.isActiveWay) return;\n\n        self.gameController.stonePick = self;\n        self.gameController.btnRemoveStone.active = true;\n        }, self.node);\n    }\n\n}\n","\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Tile{\n    hasGem: boolean = false;\n    hasSlate: boolean = false;\n    hasStone: boolean = false;\n    hasMile: boolean = false;\n    pos: cc.Vec2 = null;\n    // update (dt) {}\n}\n","\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class TouchEvent extends cc.Component {\n    @property(cc.Node)\n    target: cc.Node = null;\n\n    onLoad () {\n        this.node.on(cc.Node.EventType.TOUCH_END, function () {\n            this.setActive();\n        }, this);\n    }\n\n    setActive(){\n        if(this.target)\n        this.target.active = !this.target.active;\n    }\n\n}\n"],"sourceRoot":"/source/","file":"project.dev.js"}